<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cybertraining â€“ Python</title><link>/docs/book/python/</link><description>Recent content in Python on Cybertraining</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/book/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Introduction to Python</title><link>/docs/book/python/python-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/book/python/python-intro/</guid><description>
&lt;p>Gregor von Laszewski (&lt;a href="mailto:laszewski@gmail.com">laszewski@gmail.com&lt;/a>)&lt;/p>
&lt;hr>
&lt;p>&lt;img src="https://github.com/cloudmesh-community/book/raw/main/chapters/prg/python/images/learning.png" alt=""> &lt;strong>Learning Objectives&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Learn quickly Python under the assumption you know a programming language&lt;/li>
&lt;li>Work with modules&lt;/li>
&lt;li>Understand docopts and cmd&lt;/li>
&lt;li>Conduct some Python examples to refresh your Python knowledge&lt;/li>
&lt;li>Learn about the &lt;code>map&lt;/code> function in Python&lt;/li>
&lt;li>Learn how to start subprocesses and redirect their output&lt;/li>
&lt;li>Learn more advanced constructs such as multiprocessing and Queues&lt;/li>
&lt;li>Understand why we do not use &lt;code>anaconda&lt;/code>&lt;/li>
&lt;li>Get familiar with &lt;code>venv&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>Portions of this lesson have been adapted from the &lt;a href="https://docs.python.org/2/tutorial/">official Python
Tutorial&lt;/a> copyright &lt;a href="http://www.python.org/">Python
Software Foundation&lt;/a>.&lt;/p>
&lt;p>Python is an easy-to-learn programming language. It has efficient
high-level data structures and a simple but effective approach to
object-oriented programming. Python&amp;rsquo;s simple syntax and dynamic typing,
together with its interpreted nature, make it an ideal language for
scripting and rapid application development in many areas on most
platforms. The Python interpreter and the extensive standard library are
freely available in source or binary form for all major platforms from
the Python Web site, &lt;a href="https://www.python.org/">https://www.python.org/&lt;/a>, and may be freely
distributed. The same site also contains distributions of and pointers
to many free third-party Python modules, programs and tools, and
additional documentation. The Python interpreter can be extended with
new functions and data types implemented in C or C++ (or other languages
callable from C). Python is also suitable as an extension language for
customizable applications.&lt;/p>
&lt;p>Python is an interpreted, dynamic, high-level programming language
suitable for a wide range of applications.&lt;/p>
&lt;p>The philosophy of Python is summarized in &lt;a href="https://www.python.org/dev/peps/pep-0020/">The Zen of
Python&lt;/a> as follows:&lt;/p>
&lt;ul>
&lt;li>Explicit is better than implicit&lt;/li>
&lt;li>Simple is better than complex&lt;/li>
&lt;li>Complex is better than complicated&lt;/li>
&lt;li>Readability counts&lt;/li>
&lt;/ul>
&lt;p>The main features of Python are:&lt;/p>
&lt;ul>
&lt;li>Use of indentation whitespace to indicate blocks&lt;/li>
&lt;li>Object orient paradigm&lt;/li>
&lt;li>Dynamic typing&lt;/li>
&lt;li>Interpreted runtime&lt;/li>
&lt;li>Garbage collected memory management&lt;/li>
&lt;li>a large standard library&lt;/li>
&lt;li>a large repository of third-party libraries&lt;/li>
&lt;/ul>
&lt;p>Python is used by many companies and is applied for web development,
scientific computing, embedded applications, artificial intelligence,
software development, and information security, to name a few.&lt;/p>
&lt;p>The material collected here introduces the reader to the basic concepts
and features of the Python language and system. After you have worked
through the material you will be able to:&lt;/p>
&lt;ul>
&lt;li>use Python&lt;/li>
&lt;li>use the interactive Python interface&lt;/li>
&lt;li>understand the basic syntax of Python&lt;/li>
&lt;li>write and run Python programs&lt;/li>
&lt;li>have an overview of the standard library&lt;/li>
&lt;li>install Python libraries using venv for multi-Python interpreter development.&lt;/li>
&lt;/ul>
&lt;p>This book does not attempt to be comprehensive and cover every
single feature, or even every commonly used feature. Instead, it
introduces many of Python&amp;rsquo;s most noteworthy features and will give you
a good idea of the language&amp;rsquo;s flavor and style. After reading it, you
will be able to read and write Python modules and programs, and you will
be ready to learn more about the various Python library modules.&lt;/p>
&lt;p>In order to conduct this lesson you need&lt;/p>
&lt;ul>
&lt;li>A computer with Python 3.8.1&lt;/li>
&lt;li>Familiarity with command line usage&lt;/li>
&lt;li>A text editor such as &lt;a href="https://www.jetbrains.com/pycharm/">PyCharm&lt;/a>,
emacs, vi, or others. You should identify which works best for you
and set it up.&lt;/li>
&lt;/ul>
&lt;h2 id="references">References&lt;/h2>
&lt;p>Some important additional information can be found on the following Web
pages.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.python.org/">Python&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pip.pypa.io/en/stable/">Pip&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://virtualenv.pypa.io/en/stable/">Virtualenv&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.numpy.org/">NumPy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://scipy.org/">SciPy&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://matplotlib.org/">Matplotlib&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://pandas.pydata.org/">Pandas&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/pyenv/pyenv">pyenv&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/pyenv/pyenv">PyCharm&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Python module of the week is a Web site that provides a number of short
examples on how to use some elementary python modules. Not all modules
are equally useful and you should decide if there are better
alternatives. However, for beginners, this site provides a number of good
examples&lt;/p>
&lt;ul>
&lt;li>Python 2: &lt;a href="https://pymotw.com/2/">https://pymotw.com/2/&lt;/a>&lt;/li>
&lt;li>Python 3: &lt;a href="https://pymotw.com/3/">https://pymotw.com/3/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Python Installation</title><link>/docs/book/python/python-install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/book/python/python-install/</guid><description>
&lt;p>Gregor von Laszewski (&lt;a href="mailto:laszewski@gmail.com">laszewski@gmail.com&lt;/a>)&lt;/p>
&lt;hr>
&lt;p>&lt;img src="https://github.com/cloudmesh-community/book/raw/main/chapters/prg/python/images/learning.png" alt=""> &lt;strong>Learning Objectives&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Learn how to install Python.&lt;/li>
&lt;li>Find additional information about Python.&lt;/li>
&lt;li>Make sure your Computer supports Python.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>In this section, we explain how to install python 3.8 on a computer.
Likely much of the code will work with earlier versions, but we do
the development in Python on the newest version of Python available at
&lt;a href="https://www.python.org/downloads">https://www.python.org/downloads&lt;/a> .&lt;/p>
&lt;h2 id="hardware">Hardware&lt;/h2>
&lt;p>Python does not require any special hardware. We have installed Python
not only on PC&amp;rsquo;s and Laptops but also on Raspberry PI&amp;rsquo;s and Lego
Mindstorms.&lt;/p>
&lt;p>However, there are some things to consider. If you use many programs on
your desktop and run them all at the same time, you will find that in
up-to-date operating systems, you will find yourself quickly out of
memory. This is especially true if you use editors such as PyCharm, which we highly recommend. Furthermore, as you likely have lots of disk
access, make sure to use a fast HDD or better an SSD.&lt;/p>
&lt;p>A typical modern developer PC or Laptop has &lt;em>16GB RAM&lt;/em> and an &lt;em>SSD&lt;/em>. You
can certainly do Python on a $35-$55 Raspberry PI, but you probably will not
be able to run PyCharm. There are many alternative editors with less
memory footprint available.&lt;/p>
&lt;h2 id="python-39">Python 3.9&lt;/h2>
&lt;p>Here we discuss how to install Python 3.9 or newer on your operating system. It
is typically advantageous to use a newer version of python so you can leverage
the latest features. Please be aware that many operating systems come with
older versions that may or may not work for you. YOu always can start with the
version that is installed and if you run into issues update later.&lt;/p>
&lt;h3 id="python-39-on-macos">Python 3.9 on macOS&lt;/h3>
&lt;p>You want a number of useful tools on your macOS. This includes git, make, and a c compiler. All this can be installed with Xcode which is
available from&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://apps.apple.com/us/app/xcode/id497799835">https://apps.apple.com/us/app/xcode/id497799835&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Once you have installed it, you need to install macOS XCode command-line
tools:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ xcode-select --install
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The easiest installation of Python is to use the installation from
&lt;a href="https://www.python.org/downloads">https://www.python.org/downloads&lt;/a>. Please, visit the page and follow the
instructions to install the python &lt;code>.pkg&lt;/code> file. After this install, you have
python3 available from the command line.&lt;/p>
&lt;h3 id="python-39-on-macos-via-homebrew">Python 3.9 on macOS via Homebrew&lt;/h3>
&lt;p>Homebrew may not provide you with the newest version, so we recommend
using the install from python.org if you can.&lt;/p>
&lt;p>An alternative installation is provided from Homebrew. To use this
install method, you need to install Homebrew first. Start the process by
installing Python 3 using &lt;code>homebrew&lt;/code>. Install &lt;code>homebrew&lt;/code> using the
instruction in their &lt;a href="https://brew.sh/#install">web page&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ /usr/bin/ruby -e &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then you should be able to install Python using:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ brew install python
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="python-39-on-ubuntu-2004">Python 3.9 on Ubuntu 20.04&lt;/h2>
&lt;p>The default version of Python on Ubuntu 20.04 is 3.8. However, you can benefit
from newer version while either installing them through python.org or adding
them as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ sudo apt-get update
$ sudo apt install software-properties-common
$ sudo add-apt-repository ppa:deadsnakes/ppa -y
$ sudo apt-get install python3.9 python3-dev -y
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you can verify the version with&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python3.9 --version
&lt;/code>&lt;/pre>&lt;/div>&lt;p>which should be &lt;code>3.9.5&lt;/code> or newer.&lt;/p>
&lt;p>Now we will create a new virtual environment:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python3.9 -m venv --without-pip ~/ENV3
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you must edit the &lt;code>~/.bashrc&lt;/code> file and add the following line at the end:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">alias&lt;/span> &lt;span style="color:#000">ENV3&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;source ~/ENV3/bin/activate&amp;#34;&lt;/span>
ENV3
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now activate the virtual environment using:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ &lt;span style="color:#204a87">source&lt;/span> ~/.bashrc
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can install the pip for the virtual environment with the commands:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ curl &lt;span style="color:#4e9a06">&amp;#34;https://bootstrap.pypa.io/get-pip.py&amp;#34;&lt;/span> -o &lt;span style="color:#4e9a06">&amp;#34;get-pip.py&amp;#34;&lt;/span>
$ python get-pip.py
$ rm get-pip.py
$ pip install -U pip
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="prerequisite-windows-10">Prerequisite Windows 10&lt;/h2>
&lt;p>Python 3.9.5 can be installed on Windows 10 using:
&lt;a href="https://www.python.org/downloads">https://www.python.org/downloads&lt;/a>&lt;/p>
&lt;p>Let us assume you choose the Web-based installer than you click on the
file in the edge browser (make sure the account you use has
administrative privileges). Follow the instructions that the installer
gives. Important is that you select at one point &lt;code>[x] Add to Path&lt;/code>.
There will be an empty checkmark about this that you will click on.&lt;/p>
&lt;p>Once it is installed chose a terminal and execute&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">python --version
&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, if you have installed conda for some reason, you need to read up on
how to install 3.9.5 Python in conda or identify how to run conda and
python.org at the same time. We often see others are giving the wrong
installation instructions. Please also be aware that when you uninstall conda
it is not sufficient t just delete it. You will have t make sure that you usnet
the system variables automatically set at install time. THi includes.
modifications on Linux and or Mac in .zprofile, .bashrc and .bash_profile. In
windows, PATH and other environment variables may have been modified.&lt;/p>
&lt;h3 id="python-in-the-linux-subsystem">Python in the Linux Subsystem&lt;/h3>
&lt;p>An alternative is to use Python from within the Linux Subsystem. But
that has some limitations, and you will need to explore how to access the
file system in the subsystem to have a smooth integration between your
Windows host so you can, for example, use PyCharm.&lt;/p>
&lt;p>To activate the Linux Subsystem, please follow the instructions at&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">https://docs.microsoft.com/en-us/windows/wsl/install-win10&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>A suitable distribution would be&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.microsoft.com/en-us/p/ubuntu-1804-lts/9n9tngvndl3q?activetab=pivot:overviewtab">https://www.microsoft.com/en-us/p/ubuntu-1804-lts/9n9tngvndl3q?activetab=pivot:overviewtab&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>However, as it may use an older version of Python, you may want to update
it as previously discussed&lt;/p>
&lt;h2 id="using-venv">Using venv&lt;/h2>
&lt;p>This step is needed if you have not yet already installed a
&lt;code>venv&lt;/code> for Python to make sure you are not interfering with your system
python. Not using a venv could have catastrophic consequences and the
destruction of your operating system tools if they really on Python. The
use of &lt;code>venv&lt;/code> is simple. For our purposes we assume that you use the
directory:&lt;/p>
&lt;pre>&lt;code>~/ENV3
&lt;/code>&lt;/pre>
&lt;p>Follow these steps first:&lt;/p>
&lt;p>First cd to your home directory. Then execute&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python3 -m venv ~/ENV3
$ &lt;span style="color:#204a87">source&lt;/span> ~/ENV3/bin/activate
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can add at the end of your &lt;code>.bashrc&lt;/code> (ubuntu) or &lt;code>.bash_profile&lt;/code> or
.zprofile` (macOS) file the line&lt;/p>
&lt;p>If you like to activate it when you start a new terminal, please add
this line to your &lt;code>.bashrc&lt;/code> or &lt;code>.bash_profile&lt;/code> or .zprofile` file.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ &lt;span style="color:#204a87">source&lt;/span> ~/ENV3/bin/activate
&lt;/code>&lt;/pre>&lt;/div>&lt;p>so the environment is always loaded. Now you are ready to install
Cloudmesh.&lt;/p>
&lt;p>Check if you have the right version of Python installed with&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python --version
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To make sure you have an up to date version of pip issue the command&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ pip install pip -U
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="install-python-39-via-anaconda">Install Python 3.9 via Anaconda&lt;/h2>
&lt;p>We are not recommending ether to use conda or anaconda. If you do
so, it is your responsibility to update the information in this
section in regards to it.&lt;/p>
&lt;p>:o2: We will check your python installation, and if
you use conda and anaconda you need to work on completing this section.&lt;/p>
&lt;h3 id="download-conda-installer">Download &lt;code>conda&lt;/code> installer&lt;/h3>
&lt;p>Miniconda is recommended here. Download an installer for Windows, macOS,
and Linux from this page: &lt;a href="https://docs.conda.io/en/latest/miniconda.html">https://docs.conda.io/en/latest/miniconda.html&lt;/a>&lt;/p>
&lt;h3 id="install-conda">Install &lt;code>conda&lt;/code>&lt;/h3>
&lt;p>Follow instructions to install &lt;code>conda&lt;/code> for your operating systems:&lt;/p>
&lt;ul>
&lt;li>Windows. &lt;a href="https://conda.io/projects/conda/en/latest/user-guide/install/windows.html">https://conda.io/projects/conda/en/latest/user-guide/install/windows.html&lt;/a>&lt;/li>
&lt;li>macOS. &lt;a href="https://conda.io/projects/conda/en/latest/user-guide/install/macos.html">https://conda.io/projects/conda/en/latest/user-guide/install/macos.html&lt;/a>&lt;/li>
&lt;li>Linux. &lt;a href="https://conda.io/projects/conda/en/latest/user-guide/install/linux.html">https://conda.io/projects/conda/en/latest/user-guide/install/linux.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="install-python-via-conda">Install Python via &lt;code>conda&lt;/code>&lt;/h3>
&lt;p>To install Python 3.9.5 in a virtual environment with conda please use&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ &lt;span style="color:#204a87">cd&lt;/span> ~
$ conda create -n ENV3 &lt;span style="color:#000">python&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>3.9.5
$ conda activate ENV3
$ conda install -c anaconda pip
$ conda deactivate ENV3
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is very important to make sure you have a newer version of pip installed.
After you installed and created the ENV3 you need to activate it. This
can be done with&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ conda activate ENV3
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you like to activate it when you start a new terminal, please add
this line to your &lt;code>.bashrc&lt;/code> or &lt;code>.bash_profile&lt;/code>&lt;/p>
&lt;p>If you use zsh please add it to &lt;code>.zprofile&lt;/code> instead.&lt;/p>
&lt;h2 id="version-test">Version test&lt;/h2>
&lt;p>Regardless of which version you install, you must do a version test to make
sure you have the correct python and pip versions:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python --version
$ pip --version
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you installed everything correctly you should see&lt;/p>
&lt;pre>&lt;code>Python 3.9.5
pip 21.1.2
&lt;/code>&lt;/pre>
&lt;p>or newer.&lt;/p></description></item><item><title>Docs: Interactive Python</title><link>/docs/book/python/python-interactive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/book/python/python-interactive/</guid><description>
&lt;p>Gregor von Laszewski (&lt;a href="mailto:laszewski@gmail.com">laszewski@gmail.com&lt;/a>)&lt;/p>
&lt;p>Python can be used interactively. You can enter the interactive mode by
entering the interactive loop by executing the command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You will see something like the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a40000">$&lt;/span> &lt;span style="color:#000">python&lt;/span>
&lt;span style="color:#000">Python&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3.9&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">v3&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">9.5&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000">a7dcbdb13&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">May&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2021&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">13&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">17&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">02&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">Clang&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6.0&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">clang&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">600.0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">57&lt;/span>&lt;span style="color:#000;font-weight:bold">)]&lt;/span> &lt;span style="color:#000">on&lt;/span> &lt;span style="color:#000">darwin&lt;/span>
&lt;span style="color:#000">Type&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;help&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;copyright&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;credits&amp;#34;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">or&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;license&amp;#34;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">more&lt;/span> &lt;span style="color:#000">information&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>&amp;gt;&amp;gt;&amp;gt;&lt;/code> is the prompt used by the interpreter. This is similar to bash
where commonly &lt;code>$&lt;/code> is used.&lt;/p>
&lt;p>Sometimes it is convenient to show the prompt when illustrating an
example. This is to provide some context for what we are doing. If you
are following along you will not need to type in the prompt.&lt;/p>
&lt;p>This interactive python process does the following:&lt;/p>
&lt;ul>
&lt;li>&lt;em>read&lt;/em> your input commands&lt;/li>
&lt;li>&lt;em>evaluate&lt;/em> your command&lt;/li>
&lt;li>&lt;em>print&lt;/em> the result of the evaluation&lt;/li>
&lt;li>&lt;em>loop&lt;/em> back to the beginning.&lt;/li>
&lt;/ul>
&lt;p>This is why you may see the interactive loop referred to as a &lt;strong>REPL&lt;/strong>:
&lt;strong>R&lt;/strong>ead-&lt;strong>E&lt;/strong>valuate-&lt;strong>P&lt;/strong>rint-&lt;strong>L&lt;/strong>oop.&lt;/p>
&lt;h2 id="repl-read-eval-print-loop">REPL (Read Eval Print Loop)&lt;/h2>
&lt;p>There are many different types beyond what we have seen so far, such as
&lt;strong>dictionaries&lt;/strong>s, &lt;strong>list&lt;/strong>s, &lt;strong>set&lt;/strong>s. One handy way of using the
interactive python is to get the type of a value using type():&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87">type&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">42&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87">type&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;int&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87">type&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;hello&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87">type&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;str&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87">type&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3.14&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87">type&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;float&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also ask for help about something using help():&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">help&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">help&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">list&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">help&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">str&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using help() opens up a help message within a pager. To navigate you can
use the spacebar to go down a page w to go up a page, the arrow keys to
go up/down line-by-line, or q to exit.&lt;/p>
&lt;h2 id="interpreter">Interpreter&lt;/h2>
&lt;p>Although the interactive mode provides a convenient tool to test
things out you will see quickly that for our class we want to use the
python interpreter from the command line. Let us assume the program is
called &lt;code>prg.py&lt;/code>. Once you have written it in that file you simply can call it with&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python prg.py
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is important to name the program with meaningful names.&lt;/p></description></item><item><title>Docs: Editors</title><link>/docs/book/python/python-editor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/book/python/python-editor/</guid><description>
&lt;p>Gregor von Laszewski (&lt;a href="mailto:laszewski@gmail.com">laszewski@gmail.com&lt;/a>)&lt;/p>
&lt;p>This section is meant to give an overview of the Python editing tools
needed for completing this course. There are many other alternatives;
however, we do recommend using PyCharm.&lt;/p>
&lt;h2 id="pycharm">PyCharm&lt;/h2>
&lt;p>PyCharm is an Integrated Development Environment (IDE) used for
programming in Python. It provides code analysis, a graphical debugger,
an integrated unit tester, and integration with git.&lt;/p>
&lt;p>&lt;a href="https://youtu.be/X8ZpbZweJcw">&lt;img src="https://github.com/cloudmesh-community/book/raw/main/chapters/prg/python/images/video.png" alt="Video"> Python 8:56 Pycharm&lt;/a>&lt;/p>
&lt;p>[Video&lt;/p>
&lt;h2 id="python-in-45-minutes">Python in 45 minutes&lt;/h2>
&lt;p>Next is an additional community YouTube video about the Python
programming language. Naturally, there are many alternatives to this
video, but it is probably a good start. It also uses PyCharm
which we recommend.&lt;/p>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=N4mEzFDjqtA">&lt;img src="https://github.com/cloudmesh-community/book/raw/main/chapters/prg/python/images/video.png" alt="Video"> Python 43:16 PyCharm&lt;/a>&lt;/p>
&lt;p>[Video&lt;/p>
&lt;p>How much you want to understand Python is a bit up to you.
While it is good to know classes and inheritance, you may be able
to get away without using it for this class. However, we do recommend
that you learn it.&lt;/p>
&lt;p>PyCharm Installation:&lt;/p>
&lt;p>Method 1: Download and install it from the PyCharm website. This is easy and if
no automated install is required we recommend this method. Students and
teachers can apply for a free professional version. Please note that Jupyter
notebooks can only be viewed in the professional version.&lt;/p>
&lt;p>Method 2: PyCharm Installation on ubuntu using umake&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a40000">$&lt;/span> &lt;span style="color:#000">sudo&lt;/span> &lt;span style="color:#000">add&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">apt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">repository&lt;/span> &lt;span style="color:#000">ppa&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#000">ubuntu&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">desktop&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">ubuntu&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">make&lt;/span>
&lt;span style="color:#a40000">$&lt;/span> &lt;span style="color:#000">sudo&lt;/span> &lt;span style="color:#000">apt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">get&lt;/span> &lt;span style="color:#000">update&lt;/span>
&lt;span style="color:#a40000">$&lt;/span> &lt;span style="color:#000">sudo&lt;/span> &lt;span style="color:#000">apt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">get&lt;/span> &lt;span style="color:#000">install&lt;/span> &lt;span style="color:#000">ubuntu&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">make&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the &lt;code>umake&lt;/code> command is installed, use the next command to install PyCharm community edition:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a40000">$&lt;/span> &lt;span style="color:#000">umake&lt;/span> &lt;span style="color:#000">ide&lt;/span> &lt;span style="color:#000">pycharm&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you want to remove PyCharm installed using umake command, use this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a40000">$&lt;/span> &lt;span style="color:#000">umake&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">r&lt;/span> &lt;span style="color:#000">ide&lt;/span> &lt;span style="color:#000">pycharm&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Method 2: PyCharm installation on ubuntu using PPA&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a40000">$&lt;/span> &lt;span style="color:#000">sudo&lt;/span> &lt;span style="color:#000">add&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">apt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">repository&lt;/span> &lt;span style="color:#000">ppa&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#000">mystic&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">mirage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">pycharm&lt;/span>
&lt;span style="color:#a40000">$&lt;/span> &lt;span style="color:#000">sudo&lt;/span> &lt;span style="color:#000">apt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">get&lt;/span> &lt;span style="color:#000">update&lt;/span>
&lt;span style="color:#a40000">$&lt;/span> &lt;span style="color:#000">sudo&lt;/span> &lt;span style="color:#000">apt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">get&lt;/span> &lt;span style="color:#000">install&lt;/span> &lt;span style="color:#000">pycharm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">community&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>PyCharm also has a Professional (paid) version that can be installed
using the following command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#a40000">$&lt;/span> &lt;span style="color:#000">sudo&lt;/span> &lt;span style="color:#000">apt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">get&lt;/span> &lt;span style="color:#000">install&lt;/span> &lt;span style="color:#000">pycharm&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once installed, go to your VM dashboard and search for PyCharm.&lt;/p></description></item><item><title>Docs: Google Colab</title><link>/docs/book/python/python-google-colab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/book/python/python-google-colab/</guid><description>
&lt;p>Gregor von Laszewski (&lt;a href="mailto:laszewski@gmail.com">laszewski@gmail.com&lt;/a>)&lt;/p>
&lt;p>In this section, we are going to introduce you, how to use Google Colab
to run deep learning models.&lt;/p>
&lt;h2 id="introduction-to-google-colab">Introduction to Google Colab&lt;/h2>
&lt;p>This video contains the introduction to Google Colab. In this section we
will be learning how to start a Google Colab project.&lt;/p>
&lt;p>&lt;a href="https://drive.google.com/file/d/1vz2_VaXCAae-9luzcrIuP_ugMmKJIy7w/view?usp=sharing">&lt;img src="https://github.com/cloudmesh-community/book/raw/main/chapters/prg/python/google-colab/images/colab-1.png" alt="Video">{width=&amp;ldquo;20%&amp;quot;}&lt;/a>&lt;/p>
&lt;p>[Video&lt;/p>
&lt;h2 id="programming-in-google-colab">Programming in Google Colab&lt;/h2>
&lt;p>In this video, we will learn how to create a simple, Colab Notebook.&lt;/p>
&lt;p>Required Installations&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pip install numpy
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://drive.google.com/file/d/18mGVxgydx1TDdb4AYD8qb1To8rkSLS-H/view?usp=sharing">&lt;img src="https://github.com/cloudmesh-community/book/raw/main/chapters/prg/python/google-colab/images/colab-2.png" alt="Video">{width=&amp;ldquo;20%&amp;quot;}&lt;/a>&lt;/p>
&lt;p>[Video&lt;/p>
&lt;h2 id="benchmarking-in-google-colab-with-cloudmesh">Benchmarking in Google Colab with Cloudmesh&lt;/h2>
&lt;p>In this video, we learn how to do a basic benchmark with Cloudmesh tools.
Cloudmesh StopWatch will be used in this tutorial.&lt;/p>
&lt;p>Required Installations&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pip install numpy
pip install cloudmesh-installer
pip install cloudmesh-common
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://drive.google.com/file/d/1Ujs0XjzCTwZgmx-ADM5zx9cS5iplXfIu/view?usp=sharing">&lt;img src="https://github.com/cloudmesh-community/book/raw/main/chapters/prg/python/google-colab/images/colab-3.png" alt="Video">{width=&amp;ldquo;20%&amp;quot;}&lt;/a>&lt;/p>
&lt;p>[Video&lt;/p></description></item><item><title>Docs: Language</title><link>/docs/book/python/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/book/python/python/</guid><description>
&lt;p>Gregor von Laszewski (&lt;a href="mailto:laszewski@gmail.com">laszewski@gmail.com&lt;/a>)&lt;/p>
&lt;h2 id="statements-and-strings">Statements and Strings&lt;/h2>
&lt;p>Let us explore the syntax of Python while starting with a print statement&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello world from Python!&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will print on the terminal&lt;/p>
&lt;pre>&lt;code>Hello world from Python!
&lt;/code>&lt;/pre>
&lt;p>The print function was given a &lt;strong>string&lt;/strong> to process. A string is a
sequence of characters. A &lt;strong>character&lt;/strong> can be an alphabetic (A through
Z, lower and upper case), numeric (any of the digits), white space
(spaces, tabs, newlines, etc), syntactic directives (comma, colon,
quotation, exclamation, etc), and so forth. A string is just a sequence
of the character and typically indicated by surrounding the characters
in double-quotes.&lt;/p>
&lt;p>Standard output is discussed in the &lt;a href="#linux">Section Linux&lt;/a>.&lt;/p>
&lt;p>So, what happened when you pressed Enter? The interactive Python program
read the line &lt;code>print (&amp;quot;Hello world from Python!&amp;quot;)&lt;/code>, split it into the
print statement and the &lt;code>&amp;quot;Hello world from Python!&amp;quot;&lt;/code> string, and then
executed the line, showing you the output.&lt;/p>
&lt;h2 id="comments">Comments&lt;/h2>
&lt;p>Comments in Python are followed by a &lt;code>#&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># This is a comment&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="variables">Variables&lt;/h2>
&lt;p>You can store data into a &lt;strong>variable&lt;/strong> to access it later. For instance:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">hello&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Hello world from Python!&amp;#39;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">hello&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will print again&lt;/p>
&lt;pre>&lt;code>Hello world from Python!
&lt;/code>&lt;/pre>
&lt;h2 id="data-types">Data Types&lt;/h2>
&lt;h3 id="booleans">Booleans&lt;/h3>
&lt;p>A &lt;strong>boolean&lt;/strong> is a value that can have the values &lt;code>True&lt;/code> or &lt;code>False&lt;/code>. You
can combine booleans with &lt;strong>boolean operators&lt;/strong> such as &lt;code>and&lt;/code> and &lt;code>or&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">True&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> &lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># True&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">True&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> &lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># False&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">False&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> &lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># False&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">True&lt;/span> &lt;span style="color:#204a87;font-weight:bold">or&lt;/span> &lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># True&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">True&lt;/span> &lt;span style="color:#204a87;font-weight:bold">or&lt;/span> &lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># True&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">False&lt;/span> &lt;span style="color:#204a87;font-weight:bold">or&lt;/span> &lt;span style="color:#3465a4">False&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># False&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="numbers">Numbers&lt;/h3>
&lt;p>The interactive interpreter can also be used as a calculator. For
instance, say we wanted to compute a multiple of 21:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">21&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 42&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We saw here the print statement again. We passed in the result of the
operation 21 * 2. An &lt;strong>integer&lt;/strong> (or &lt;strong>int&lt;/strong>) in Python is a numeric
value without a fractional component (those are called &lt;strong>floating
point&lt;/strong> numbers, or &lt;strong>float&lt;/strong> for short).&lt;/p>
&lt;p>The mathematical operators compute the related mathematical operation to
the provided numbers. Some operators are:&lt;/p>
&lt;p>Operator Function&lt;/p>
&lt;hr>
&lt;p>* multiplication&lt;br>
/ division &lt;br>
+ addition &lt;br>
- subtraction &lt;br>
** exponent&lt;/p>
&lt;p>Exponentiation $x^y$ is written as x**y is x to the yth power.&lt;/p>
&lt;p>You can combine &lt;strong>float&lt;/strong>s and &lt;strong>int&lt;/strong>s:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3.14&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">42&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 13.9890909091&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">**&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 8&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that &lt;strong>operator precedence&lt;/strong> is important. Using parenthesis to
indicate affect the order of operations gives a difference results, as
expected:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3.14&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">42&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 11.42&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5.0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># 6.2&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5.0&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># -0.6&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="module-management">Module Management&lt;/h2>
&lt;p>A module allows you to logically organize your Python code. Grouping
related code into a module makes the code easier to understand and use.
A module is a Python object with arbitrarily named attributes that you
can bind and reference. A module is a file consisting of Python code. A
module can define functions, classes, and variables. A module can also
include runnable code.&lt;/p>
&lt;h3 id="import-statement">Import Statement&lt;/h3>
&lt;p>When the interpreter encounters an import statement, it imports the
module if the module is present in the search path. A search path is a
list of directories that the interpreter searches before importing a
module. The from&amp;hellip;import Statement Python&amp;rsquo;s from statement lets you
import specific attributes from a module into the current namespace. It
is preferred to use for each import its own line such as:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">matplotlib&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When the interpreter encounters an import statement, it imports the
module if the module is present in the search path. A search path is a
list of directories that the interpreter searches before importing a
module.&lt;/p>
&lt;h3 id="the-from--import-statement">The from &amp;hellip; import Statement&lt;/h3>
&lt;p>Python&amp;rsquo;s from statement lets you import specific attributes from a
module into the current namespace. The from &amp;hellip; import has the following
syntax:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">datetime&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">datetime&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="date-time-in-python">Date Time in Python&lt;/h2>
&lt;p>The &lt;code>datetime&lt;/code> module supplies classes for manipulating dates and times in
both simple and complex ways. While date and time arithmetic is
supported, the focus of the implementation is on efficient attribute
extraction for output formatting and manipulation. For related
functionality, see also the time and calendar modules.&lt;/p>
&lt;p>The import Statement You can use any Python source file as a module by
executing an import statement in some other Python source file.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">datetime&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">datetime&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This module offers a generic date/time string parser which is able to
parse most known formats to represent a date and/or time.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">dateutil.parser&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">parse&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>pandas is an open-source Python library for data analysis that needs to
be imported.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">pandas&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">pd&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create a string variable with the class start time&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">fall_start&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;08-21-2018&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Convert the string to datetime format&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">strptime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fall_start&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;%m-&lt;/span>&lt;span style="color:#4e9a06">%d&lt;/span>&lt;span style="color:#4e9a06">-%Y&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> \&lt;span style="color:#8f5902;font-style:italic">#&lt;/span>
&lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2017&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">21&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Creating a list of strings as dates&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">class_dates&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;8/25/2017&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;9/1/2017&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;9/8/2017&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;9/15/2017&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;9/22/2017&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;9/29/2017&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Convert Class_dates strings into &lt;code>datetime&lt;/code> format and save the list into
variable a&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">datetime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">strptime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;%m/&lt;/span>&lt;span style="color:#4e9a06">%d&lt;/span>&lt;span style="color:#4e9a06">/%Y&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">class_dates&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Use parse() to attempt to auto-convert common string formats. Parser
must be a string or character stream, not list.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">parse&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fall_start&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># datetime.datetime(2017, 8, 21, 0, 0)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Use parse() on every element of the Class_dates string.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">parse&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">class_dates&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># [datetime.datetime(2017, 8, 25, 0, 0),&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># datetime.datetime(2017, 9, 1, 0, 0),&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># datetime.datetime(2017, 9, 8, 0, 0),&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># datetime.datetime(2017, 9, 15, 0, 0),&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># datetime.datetime(2017, 9, 22, 0, 0),&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># datetime.datetime(2017, 9, 29, 0, 0)]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Use parse, but designate that the day is first.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">parse&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fall_start&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dayfirst&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#3465a4">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># datetime.datetime(2017, 8, 21, 0, 0)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create a &lt;code>dataframe&lt;/code>. A DataFrame is a tabular data structure comprised of
rows and columns, akin to a spreadsheet, database table. DataFrame is a
group of Series objects that share an index (the column names).&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">pandas&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">pd&lt;/span>
&lt;span style="color:#000">data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;dates&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;8/25/2017 18:47:05.069722&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;9/1/2017 18:47:05.119994&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;9/8/2017 18:47:05.178768&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;9/15/2017 18:47:05.230071&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;9/22/2017 18:47:05.230071&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;9/29/2017 18:47:05.280592&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;complete&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">]}&lt;/span>
&lt;span style="color:#000">df&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">pd&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">DataFrame&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">columns&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;dates&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;complete&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">df&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># dates complete&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 0 8/25/2017 18:47:05.069722 1&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 1 9/1/2017 18:47:05.119994 0&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 2 9/8/2017 18:47:05.178768 1&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 3 9/15/2017 18:47:05.230071 1&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 4 9/22/2017 18:47:05.230071 0&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 5 9/29/2017 18:47:05.280592 1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Convert &lt;code>df[`date`]&lt;/code> from string to datetime&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">pandas&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">pd&lt;/span>
&lt;span style="color:#000">pd&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">to_datetime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">df&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;dates&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 0 2017-08-25 18:47:05.069722&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 1 2017-09-01 18:47:05.119994&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 2 2017-09-08 18:47:05.178768&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 3 2017-09-15 18:47:05.230071&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 4 2017-09-22 18:47:05.230071&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 5 2017-09-29 18:47:05.280592&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Name: dates, dtype: datetime64[ns]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="control-statements">Control Statements&lt;/h2>
&lt;h3 id="comparison">Comparison&lt;/h3>
&lt;p>Computer programs do not only execute instructions. Occasionally, a
choice needs to be made. Such as a choice is based on a condition.
Python has several conditional operators:&lt;/p>
&lt;p>Operator Function&lt;/p>
&lt;hr>
&lt;p>&amp;gt; greater than&lt;br>
&amp;lt; smaller than&lt;br>
== equals &lt;br>
!= is not&lt;/p>
&lt;p>Conditions are always combined with variables. A program can make a
choice using the if keyword. For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">input&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Guess x:&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Correct!&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, &lt;em>You guessed correctly!&lt;/em> will only be printed if the
variable x equals four. Python can also execute
multiple conditions using the &lt;code>elif&lt;/code> and &lt;code>else&lt;/code> keywords.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">input&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Guess x:&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Correct!&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">elif&lt;/span> &lt;span style="color:#204a87">abs&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Wrong, but close!&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">else&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Wrong, way off!&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="iteration">Iteration&lt;/h3>
&lt;p>To repeat code, the &lt;code>for&lt;/code> keyword can be used. For example, to display the
numbers from 1 to 10, we could write something like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#204a87">range&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">11&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Hello!&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The second argument to the &lt;code>range&lt;/code>, &lt;em>11&lt;/em>, is not inclusive, meaning that the
loop will only get to &lt;em>10&lt;/em> before it finishes. Python itself starts
counting from 0, so this code will also work:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#204a87">range&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In fact, the range function defaults to starting value of &lt;em>0&lt;/em>, so it
is equivalent to:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#204a87">range&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can also nest loops inside each other:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#204a87">range&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">j&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#204a87">range&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#4e9a06">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">j&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this case, we have two nested loops. The code will iterate over the
entire coordinate range (0,0) to (9,9)&lt;/p>
&lt;h2 id="datatypes">Datatypes&lt;/h2>
&lt;h3 id="lists">Lists&lt;/h3>
&lt;p>see: &lt;a href="https://www.tutorialspoint.com/python/python_lists.htm">https://www.tutorialspoint.com/python/python_lists.htm&lt;/a>&lt;/p>
&lt;p>Lists in Python are ordered sequences of elements, where each element
can be accessed using a 0-based index.&lt;/p>
&lt;p>To define a list, you simply list its elements between square brackets
&amp;lsquo;[ ]':&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">names&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;Albert&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;Jane&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;Liz&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;John&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;Abby&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># access the first element of the list&lt;/span>
&lt;span style="color:#000">names&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># &amp;#39;Albert&amp;#39;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># access the third element of the list&lt;/span>
&lt;span style="color:#000">names&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># &amp;#39;Liz&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also use a negative index if you want to start counting elements
from the end of the list. Thus, the last element has index &lt;em>-1&lt;/em>, the
second before the last element has index &lt;em>-2&lt;/em> and so on:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># access the last element of the list&lt;/span>
&lt;span style="color:#000">names&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># &amp;#39;Abby&amp;#39;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># access the second last element of the list&lt;/span>
&lt;span style="color:#000">names&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># &amp;#39;John&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Python also allows you to take whole slices of the list by specifying a
beginning and end of the slice separated by a colon&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># the middle elements, excluding first and last&lt;/span>
&lt;span style="color:#000">names&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># [&amp;#39;Jane&amp;#39;, &amp;#39;Liz&amp;#39;, &amp;#39;John&amp;#39;]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see from the example, the starting index in the slice
is inclusive and the ending one, exclusive.&lt;/p>
&lt;p>Python provides a variety of methods for manipulating the members of a
list.&lt;/p>
&lt;p>You can add elements with append&amp;rsquo;:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">names&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Liz&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">names&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># [&amp;#39;Albert&amp;#39;, &amp;#39;Jane&amp;#39;, &amp;#39;Liz&amp;#39;,&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># &amp;#39;John&amp;#39;, &amp;#39;Abby&amp;#39;, &amp;#39;Liz&amp;#39;]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, the elements in a list need not be unique.&lt;/p>
&lt;p>Merge two lists with &amp;lsquo;extend&amp;rsquo;:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">names&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">extend&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Lindsay&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Connor&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#000">names&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># [&amp;#39;Albert&amp;#39;, &amp;#39;Jane&amp;#39;, &amp;#39;Liz&amp;#39;, &amp;#39;John&amp;#39;,&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># &amp;#39;Abby&amp;#39;, &amp;#39;Liz&amp;#39;, &amp;#39;Lindsay&amp;#39;, &amp;#39;Connor&amp;#39;]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Find the index of the first occurrence of an element with &amp;lsquo;index&amp;rsquo;:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">names&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">index&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Liz&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> \&lt;span style="color:#8f5902;font-style:italic"># 2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remove elements by value with &amp;lsquo;remove&amp;rsquo;:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">names&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">remove&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Abby&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">names&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># [&amp;#39;Albert&amp;#39;, &amp;#39;Jane&amp;#39;, &amp;#39;Liz&amp;#39;, &amp;#39;John&amp;#39;,&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># &amp;#39;Liz&amp;#39;, &amp;#39;Lindsay&amp;#39;, &amp;#39;Connor&amp;#39;]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remove elements by index with &amp;lsquo;pop&amp;rsquo;:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">names&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pop&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># &amp;#39;Jane&amp;#39;&lt;/span>
&lt;span style="color:#000">names&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># [&amp;#39;Albert&amp;#39;, &amp;#39;Liz&amp;#39;, &amp;#39;John&amp;#39;,&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># &amp;#39;Liz&amp;#39;, &amp;#39;Lindsay&amp;#39;, &amp;#39;Connor&amp;#39;]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice that pop returns the element being removed, while remove does
not.&lt;/p>
&lt;p>If you are familiar with stacks from other programming languages, you
can use insert and &amp;lsquo;pop&amp;rsquo;:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">names&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">insert&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Lincoln&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">names&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># [&amp;#39;Lincoln&amp;#39;, &amp;#39;Albert&amp;#39;, &amp;#39;Liz&amp;#39;,&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># &amp;#39;John&amp;#39;, &amp;#39;Liz&amp;#39;, &amp;#39;Lindsay&amp;#39;, &amp;#39;Connor&amp;#39;]&lt;/span>
&lt;span style="color:#000">names&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pop&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># &amp;#39;Connor&amp;#39;&lt;/span>
&lt;span style="color:#000">names&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># [&amp;#39;Lincoln&amp;#39;, &amp;#39;Albert&amp;#39;, &amp;#39;Liz&amp;#39;,&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># &amp;#39;John&amp;#39;, &amp;#39;Liz&amp;#39;, &amp;#39;Lindsay&amp;#39;]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Python documentation contains a &lt;a href="">full list of list operations&lt;/a>.&lt;/p>
&lt;p>To go back to the range function you used earlier, it simply creates a
list of numbers:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87">range&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/span>
&lt;span style="color:#204a87">range&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># [2, 4, 6, 8]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="sets">Sets&lt;/h3>
&lt;p>Python lists can contain duplicates as you saw previously:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">names&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Albert&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Jane&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Liz&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;John&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Abby&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Liz&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When we do not want this to be the case, we can use a
&lt;a href="https://docs.python.org/2/library/stdtypes.html#set">set&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">unique_names&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">set&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">names&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">unique_names&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># set([&amp;#39;Lincoln&amp;#39;, &amp;#39;John&amp;#39;, &amp;#39;Albert&amp;#39;, &amp;#39;Liz&amp;#39;, &amp;#39;Lindsay&amp;#39;])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Keep in mind that the &lt;em>set&lt;/em> is an unordered collection of objects, thus
we can not access them by index:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">unique_names&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Traceback (most recent call last):&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># TypeError: &amp;#39;set&amp;#39; object does not support indexing&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, we can convert a set to a list easily:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">unique_names&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">list&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">unique_names&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">unique_names&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">`Lincoln&amp;#39;, `&lt;/span>&lt;span style="color:#000">John&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;, `Albert&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">`Liz&amp;#39;, `&lt;/span>&lt;span style="color:#000">Lindsay&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;]&lt;/span>
&lt;span style="color:#000">unique_names&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># `Lincoln&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice that in this case, the order of elements in the new list matches
the order in which the elements were displayed when we create the set.
We had&lt;/p>
&lt;p>&lt;code>set(['Lincoln', 'John', 'Albert', 'Liz', 'Lindsay'])&lt;/code>&lt;/p>
&lt;p>and now we have&lt;/p>
&lt;p>&lt;code>['Lincoln', 'John', 'Albert', 'Liz', 'Lindsay'])&lt;/code>&lt;/p>
&lt;p>You should not assume this is the case in general. That is, do not make
any assumptions about the order of elements in a set when it is
converted to any type of sequential data structure.&lt;/p>
&lt;p>You can change a set&amp;rsquo;s contents using the add, remove and update methods
which correspond to the append, remove and extend methods in a list. In
addition to these, &lt;em>set&lt;/em> objects support the operations you may be
familiar with from mathematical sets: &lt;em>union&lt;/em>, &lt;em>intersection&lt;/em>,
&lt;em>difference&lt;/em>, as well as operations to check containment. You can read
about this in the &lt;a href="https://docs.python.org/2/library/stdtypes.html#set">Python documentation for
sets&lt;/a>.&lt;/p>
&lt;h3 id="removal-and-testing-for-membership-in-sets">Removal and Testing for Membership in Sets&lt;/h3>
&lt;p>One important advantage of a &lt;code>set&lt;/code> over a &lt;code>list&lt;/code> is that &lt;strong>access to
elements is fast&lt;/strong>. If you are familiar with different data structures
from a Computer Science class, the Python list is implemented by an
array, while the set is implemented by a hash table.&lt;/p>
&lt;p>We will demonstrate this with an example. Let us say we have a list and a
set of the same number of elements (approximately 100 thousand):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">random&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">timeit&lt;/span>
&lt;span style="color:#000">nums_set&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">set&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#000">random&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">randint&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">maxint&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">_&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#204a87">range&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">**&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">)])&lt;/span>
&lt;span style="color:#000">nums_list&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">list&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nums_set&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nums_set&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 100000&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We will use the &lt;a href="https://docs.python.org/2/library/timeit.html">timeit&lt;/a>
Python module to time 100 operations that test for the existence of a
member in either the list or set:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">timeit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">timeit&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;random.randint(0, sys.maxint) in nums&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">setup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;import random; nums=&lt;/span>&lt;span style="color:#4e9a06">%s&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#204a87">str&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nums_set&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">number&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 0.0004038810729980469&lt;/span>
&lt;span style="color:#000">timeit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">timeit&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;random.randint(0, sys.maxint) in nums&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">setup&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;import random; nums=&lt;/span>&lt;span style="color:#4e9a06">%s&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#204a87">str&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nums_list&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">number&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 0.398054122924804&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The exact duration of the operations on your system will be different,
but the takeaway will be the same: searching for an element in a set is
orders of magnitude faster than in a list. This is important to keep in
mind when you work with large amounts of data.&lt;/p>
&lt;h3 id="dictionaries">Dictionaries&lt;/h3>
&lt;p>One of the very important data structures in python is a dictionary also
referred to as &lt;code>dict&lt;/code>.&lt;/p>
&lt;p>A dictionary represents a key value store:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">computer&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;name&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;mycomputer&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;memory&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">16&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;kind&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Laptop&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;computer[&amp;#39;name&amp;#39;]: &amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">computer&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;name&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># computer[&amp;#39;name&amp;#39;]: mycomputer&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;computer[&amp;#39;memory&amp;#39;]: &amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">computer&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;memory&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># computer[&amp;#39;Age&amp;#39;]: 16&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A convenient for to print by named attributes is&lt;/p>
&lt;pre>&lt;code>print(&amp;quot;{name} {memory}'.format(**computer))
&lt;/code>&lt;/pre>
&lt;p>This form of printing with the format statement and a reference to data
increases the readability of the print statements.&lt;/p>
&lt;p>You can delete elements with the following commands:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">del&lt;/span> &lt;span style="color:#000">computer&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;name&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># remove entry with key &amp;#39;name&amp;#39;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># computer&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># &lt;/span>
&lt;span style="color:#000">computer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">clear&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># remove all entries in dict&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># computer&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># &lt;/span>
&lt;span style="color:#204a87;font-weight:bold">del&lt;/span> &lt;span style="color:#000">computer&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># delete entire dictionary&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># computer&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Traceback (most recent call last):&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># NameError: name &amp;#39;computer&amp;#39; is not defined&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can iterate over a dict:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">computer&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;name&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;mycomputer&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;memory&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">16&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;kind&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Laptop&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">item&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">computer&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">item&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">computer&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">item&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># name mycomputer&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># memory 16&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># kind laptop&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="dictionary-keys-and-values">Dictionary Keys and Values&lt;/h3>
&lt;p>You can retrieve both the keys and values of a dictionary using the
keys() and values() methods of the dictionary, respectively:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">computer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">keys&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># [&amp;#39;name&amp;#39;, &amp;#39;memory&amp;#39;, &amp;#39;kind&amp;#39;]&lt;/span>
&lt;span style="color:#000">computer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># [&amp;#39;mycomputer&amp;#39;, &amp;#39;memory&amp;#39;, &amp;#39;kind&amp;#39;]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Both methods return lists. Please remember howver that the keys and
order in which the elements are returned are not necessarily the same.
It is important to keep this in
mind:&lt;/p>
&lt;blockquote>
&lt;p>&lt;img src="https://github.com/cloudmesh-community/book/raw/main/chapters/prg/python/images/warning.png" alt=""> *You cannot&lt;/p>
&lt;/blockquote>
&lt;p>![&lt;/p>
&lt;blockquote>
&lt;p>make any assumptions about the order in which
the elements of a dictionary will be returned by the keys() and
values() methods*.&lt;/p>
&lt;/blockquote>
&lt;p>However, you can assume that if you call &lt;code>keys()&lt;/code> and &lt;code>values()&lt;/code> in
sequence, the order of elements will at least correspond in both
methods.&lt;/p>
&lt;h3 id="counting-with-dictionaries">Counting with Dictionaries&lt;/h3>
&lt;p>One application of dictionaries that frequently comes up is counting the
elements in a sequence. For example, say we have a sequence of coin
flips:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">random&lt;/span>
&lt;span style="color:#000">die_rolls&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">random&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">choice&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;heads&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;tails&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">_&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#204a87">range&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># die_rolls&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># [&amp;#39;heads&amp;#39;, &amp;#39;tails&amp;#39;, &amp;#39;heads&amp;#39;,&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># &amp;#39;tails&amp;#39;, &amp;#39;heads&amp;#39;, &amp;#39;heads&amp;#39;,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;tails&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;heads&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;heads&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;heads&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The actual list die_rolls will likely be different when you execute
this on your computer since the outcomes of the die rolls are random.&lt;/p>
&lt;p>To compute the probabilities of heads and tails, we could count how many
heads and tails we have in the list:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">counts&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;heads&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;tails&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">outcome&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">die_rolls&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">assert&lt;/span> &lt;span style="color:#000">outcome&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">counts&lt;/span>
&lt;span style="color:#000">counts&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">outcome&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Probability of heads: &lt;/span>&lt;span style="color:#4e9a06">%.2f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">counts&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;heads&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span> &lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">die_rolls&lt;/span>&lt;span style="color:#000;font-weight:bold">)))&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Probability of heads: 0.70&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Probability of tails: &lt;/span>&lt;span style="color:#4e9a06">%.2f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">counts&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;tails&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span> &lt;span style="color:#204a87">sum&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">counts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">values&lt;/span>&lt;span style="color:#000;font-weight:bold">())))&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Probability of tails: 0.30&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In addition to how we use the dictionary counts to count the elements of
coin_flips, notice a couple of things about this example:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>We used the assert outcome in the &lt;code>count&lt;/code> statement. The assert statement
in Python allows you to easily insert debugging statements in your
code to help you discover errors more quickly. assert statements are
executed whenever the internal Python &lt;code>__debug__&lt;/code> variable is set
to True, which is always the case unless you start Python with the
-O option which allows you to run &lt;em>optimized&lt;/em> Python.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When we computed the probability of tails, we used the built-in &lt;code>sum&lt;/code> function, which allowed us to quickly find the total number of coin flips. The &lt;code>sum&lt;/code> is one of many built-in functions you can &lt;a href="https://docs.python.org/2/library/functions.html">read about
here&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="functions">Functions&lt;/h2>
&lt;p>You can reuse code by putting it inside a function that you can call in
other parts of your programs. Functions are also a good way of grouping
code that logically belongs together in one coherent whole. A function
has a unique name in the program. Once you call a function, it will
execute its body which consists of one or more lines of code:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">check_triangle&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> \
&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">c&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#204a87">abs&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> \
&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">c&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#204a87">abs&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> \
&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> &lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#204a87">abs&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">check_triangle&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The def keyword tells Python we are defining a function. As part of the
definition, we have the function name, check_triangle, and the
parameters of the function &amp;ndash; variables that will be populated when the function is called.&lt;/p>
&lt;p>We call the function with arguments 4, 5, and 6, which are passed in
order into the parameters a, b, and c.Â A function can be called several
times with varying parameters. There is no limit to the number of
function calls.&lt;/p>
&lt;p>It is also possible to store the output of a function in a variable, so
it can be reused.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">check_triangle&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> \
&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">c&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#204a87">abs&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> \
&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">c&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#204a87">abs&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> \
&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> &lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#204a87">abs&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">check_triangle&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">result&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="classes">Classes&lt;/h2>
&lt;p>A class is an encapsulation of data and the processes that work on them.
The data is represented in member variables, and the processes are
defined in the methods of the class (methods are functions inside the
class). For example, let&amp;rsquo;s see how to define a Triangle class:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Triangle&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">object&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">__init__&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">length&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">width&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">height&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">angle1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">angle2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">angle3&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#204a87;font-weight:bold">not&lt;/span> &lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_sides_ok&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">length&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">width&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">height&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;The sides of the triangle are invalid.&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">elif&lt;/span> &lt;span style="color:#204a87;font-weight:bold">not&lt;/span> &lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_angles_ok&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">angle1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">angle2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">angle3&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;The angles of the triangle are invalid.&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_length&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">length&lt;/span>
&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_width&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">width&lt;/span>
&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_height&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">height&lt;/span>
&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_angle1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">angle1&lt;/span>
&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_angle2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">angle2&lt;/span>
&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_angle3&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">angle3&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">_sides_ok&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> \
&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">c&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#204a87">abs&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> \
&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">c&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#204a87">abs&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> \
&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> &lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#204a87">abs&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">_angles_ok&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">180&lt;/span>
&lt;span style="color:#000">triangle&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Triangle&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">35&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">65&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">80&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Python has full object-oriented programming (OOP) capabilities, however
we can not cover all of them in this section, so if you need more
information please refer to the
&lt;a href="https://docs.python.org/2.7/tutorial/classes.html">Python docs on classes and
OOP&lt;/a>.&lt;/p>
&lt;h2 id="modules">Modules&lt;/h2>
&lt;p>Now write this simple program and save it:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello Cloud!&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As a check, make sure the file contains the expected contents on the
command line:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cat hello.py
print&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello Cloud!&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To execute your program pass the file as a parameter to the python
command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python hello.py
Hello Cloud!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Files in which Python code is stored are called &lt;strong>module&lt;/strong>s. You can
execute a Python module from the command line like you just did, or you
can import it in other Python code using the import statement.&lt;/p>
&lt;p>Let us write a more involved Python program that will receive as input
the lengths of the three sides of a triangle, and will output whether
they define a valid triangle. A triangle is valid if the length of each
side is less than the sum of the lengths of the other two sides and
greater than the difference of the lengths of the other two sides.:&lt;/p>
&lt;pre>&lt;code>&amp;quot;&amp;quot;&amp;quot;Usage: check_triangle.py [-h] LENGTH WIDTH HEIGHT
Check if a triangle is valid.
Arguments:
LENGTH The length of the triangle.
WIDTH The width of the triangle.
HEIGHT The height of the triangle.
Options:
-h --help
&amp;quot;&amp;quot;&amp;quot;
from docopt import docopt
if __name__ == '__main__':
arguments = docopt(__doc__)
a, b, c = int(arguments['LENGTH']),
int(arguments['WIDTH']),
int(arguments['HEIGHT'])
valid_triangle = \
a &amp;lt; b + c and a &amp;gt; abs(b - c) and \
b &amp;lt; a + c and b &amp;gt; abs(a - c) and \
c &amp;lt; a + b and c &amp;gt; abs(a - b)
print('Triangle with sides %d, %d and %d is valid: %r' % (
a, b, c, valid_triangle
))
&lt;/code>&lt;/pre>
&lt;p>Assuming we save the program in a file called &lt;code>check_triangle.py&lt;/code>, we can
run it like so:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python check_triangle.py &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span>
Triangle with sides 4, 5, and &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span> is valid: True
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let us break this down a bit.&lt;/p>
&lt;ol>
&lt;li>We&amp;rsquo;ve defined a boolean expression that tells us if the sides that were input define a valid triangle. The result of the expression is stored in the valid_triangle variable. inside are true, and False
otherwise.&lt;/li>
&lt;li>We&amp;rsquo;ve used the backslash symbol &lt;code>\&lt;/code> to format our code nicely. The
backslash simply indicates that the current line is being continued
on the next line.&lt;/li>
&lt;li>When we run the program, we do the check if &lt;code>__name__ == '__main__'&lt;/code>. &lt;code>__name__&lt;/code> is an internal Python variable that
allows us to tell whether the current file is being run from the
command line (value &lt;code>__name__&lt;/code>), or is being imported by a module
(the value will be the name of the module). Thus, with this statement, we arre just making sure the program is being run by the command line.&lt;/li>
&lt;li>We are using the &lt;code>docopt&lt;/code> module to handle command line arguments. The
advantage of using this module is that it generates a usage help
statement for the program and enforces command line arguments
automatically. All of this is done by parsing the docstring at the
top of the file.&lt;/li>
&lt;li>In the print function, we are using &lt;a href="https://docs.python.org/2/library/string.html#format-string-syntax">Python&amp;rsquo;s string formatting
capabilities&lt;/a>
to insert values into the string we are displaying.&lt;/li>
&lt;/ol>
&lt;h2 id="lambda-expressions">Lambda Expressions&lt;/h2>
&lt;p>As opposed to normal functions in Python which are defined using the &lt;code>def&lt;/code>
keyword, lambda functions in Python are anonymous functions that do not have a
name and are defined using the &lt;code>lambda&lt;/code> keyword. The generic syntax of a lambda function is in the form of &lt;code>lambda arguments: expression&lt;/code>, as shown in the following
example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">greeter&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">lambda&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Hello &lt;/span>&lt;span style="color:#4e9a06">%s&lt;/span>&lt;span style="color:#4e9a06">!&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">greeter&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Albert&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you could probably guess, the result is:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">Hello&lt;/span> &lt;span style="color:#000">Albert&lt;/span>&lt;span style="color:#a40000">!&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now consider the following examples:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">power2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">lambda&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">**&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>power2&lt;/code> function defined in the expression, is equivalent to the
following definition:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">power2&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">**&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Lambda functions are useful when you need a function for a short period. Note that they can also be very useful when passed as an argument with
other built-in functions that take a function as an argument, e.g.Â &lt;code>filter()&lt;/code> and
&lt;code>map()&lt;/code>. In the next example, we show how a lambda function can be combined with
the &lt;code>filer&lt;/code> function. Consider the array &lt;code>all_names&lt;/code> which contains five words
that rhyme together. We want to filter the words that contain the word
&lt;code>name&lt;/code>. To achieve this, we pass the function &lt;code>lambda x: 'name' in x&lt;/code> as the
first argument. This lambda function returns &lt;code>True&lt;/code> if the word &lt;code>name&lt;/code> exists as
a substring in the string &lt;code>x&lt;/code>. The second argument of &lt;code>filter&lt;/code> function is the
array of names, i.e.Â &lt;code>all_names&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">all_names&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;surname&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;rename&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;nickname&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;acclaims&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;defame&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000">filtered_names&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">list&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">filter&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">lambda&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;name&amp;#39;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">all_names&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">filtered_names&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># [&amp;#39;surname&amp;#39;, &amp;#39;rename&amp;#39;, &amp;#39;nickname&amp;#39;]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, the names are successfully filtered as we expected.&lt;/p>
&lt;p>In Python, the filter function returns a filter object or the iterator
which gets lazily evaluated which means neither we can access the
elements of the filter object with index nor we can use &lt;code>len()&lt;/code> to find
the length of the filter object.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">list_a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000">filter_obj&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">filter&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">lambda&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">list_a&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Convert the filer obj to a list&lt;/span>
&lt;span style="color:#000">even_num&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">list&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">filter_obj&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">even_num&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Output: [2, 4]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In Python, we can have a small usually a single linear anonymous function called Lambda function which can have any number of arguments
just like a normal function but with only one expression with no
return statement. The result of this expression can be applied to a
value.&lt;/p>
&lt;p>Basic Syntax:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">lambda&lt;/span> &lt;span style="color:#000">arguments&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">expression&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For example, a function in python&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">multiply&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">b&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#call the function&lt;/span>
&lt;span style="color:#000">multiply&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#outputs: 15&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The same function can be written as Lambda function. This function named as
multiply is having 2 arguments and returns their multiplication.&lt;/p>
&lt;p>Lambda equivalent for this function would be:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">multiply&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Lambda&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">b&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">multiply&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># outputs: 15&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here a and b are the 2 arguments and a*b is the expression whose value
is returned as an output.&lt;/p>
&lt;p>Also, we don&amp;rsquo;t need to assign the Lambda function to a variable.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">lambda&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">)(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Lambda functions are mostly passed as a parameter to a function which
expects a function objects like in map or filter.&lt;/p>
&lt;h3 id="map">map&lt;/h3>
&lt;p>The basic syntax of the map function is&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87">map&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">function_object&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">iterable1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">iterable2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>map functions expect a function object and any number of iterable like a list or dictionary. It executes the function_object for each
element in the sequence and returns a list of the elements modified by
the function object.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">multiply&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>
&lt;span style="color:#204a87">map&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">multiply2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Output [4, 8, 12, 16]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we want to write the same function using Lambda&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87">map&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">lambda&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Output [4, 8, 12, 16]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="dictionary">dictionary&lt;/h3>
&lt;p>Now, let us see how we can iterate over a dictionary using map and lambda
Let us say we have a dictionary object&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">dict_movies&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;movie&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;avengers&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;comic&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;marvel&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;movie&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;superman&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;comic&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;dc&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can iterate over this dictionary and read the elements of it using
map and lambda functions in following way:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87">map&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">lambda&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;movie&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">dict_movies&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Output: [&amp;#39;avengers&amp;#39;, &amp;#39;superman&amp;#39;]&lt;/span>
&lt;span style="color:#204a87">map&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">lambda&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;comic&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">dict_movies&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Output: [&amp;#39;marvel&amp;#39;, &amp;#39;dc&amp;#39;]&lt;/span>
&lt;span style="color:#204a87">map&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">lambda&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;movie&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;avengers&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dict_movies&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Output: [True, False]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In Python3, map function returns an iterator or map object which gets
lazily evaluated which means neither we can access the elements of the
map object with index nor we can use len() to find the length of the
map object. We can force convert the map output i.e.Â the map object
to list as shown next:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">map_output&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">map&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">lambda&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">map_output&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Output: map object: &amp;lt;map object at 0x04D6BAB0&amp;gt;&lt;/span>
&lt;span style="color:#000">list_map_output&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">list&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">map_output&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">list_map_output&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Output: [2, 4, 6, 8]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="iterators">Iterators&lt;/h2>
&lt;p>In Python, an iterator protocol is defined using two methods:
&lt;code>__iter()__&lt;/code> and &lt;code>next()&lt;/code>. The former returns the iterator object and
latter returns the next element of a sequence. Some advantages of
iterators are as follows:&lt;/p>
&lt;ul>
&lt;li>Readability&lt;/li>
&lt;li>Supports sequences of infinite length&lt;/li>
&lt;li>Saving resources&lt;/li>
&lt;/ul>
&lt;p>There are several built-in objects in Python which implement iterator
protocol, e.g.Â string, list, dictionary. In the following example, we
create a new class that follows the iterator protocol. We then use the
class to generate &lt;code>log2&lt;/code> of numbers:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">math&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">log2&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">LogTwo&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;Implements an iterator of log two&amp;#34;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">__init__&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">last&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">last&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">last&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">__iter__&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">current_num&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#3465a4">self&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">__next__&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">current_num&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">last&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">log2&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">current_num&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">current_num&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">result&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">else&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">raise&lt;/span> &lt;span style="color:#c00;font-weight:bold">StopIteration&lt;/span>
&lt;span style="color:#000">L&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">LogTwo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">iter&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">L&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">next&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">next&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">next&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">next&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, we first create an instance of the class and assign
its &lt;code>__iter()__&lt;/code> function to a variable called &lt;code>i&lt;/code>. Then by calling
the &lt;code>next()&lt;/code> function four times, we get the following output:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python iterator.py
0.0
1.0
1.584962500721156
2.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you probably noticed, the lines are &lt;code>log2()&lt;/code> of 1, 2, 3, 4 respectively.&lt;/p>
&lt;h2 id="generators">Generators&lt;/h2>
&lt;p>Before we go to Generators, please understand Iterators. Generators
are also Iterators but they can only be iterated over once. That is
because generators do not store the values in memory instead they
generate the values on the go. If we want to print those values then
we can either simply iterate over them or use the for loop.&lt;/p>
&lt;h3 id="generators-with-function">Generators with function&lt;/h3>
&lt;p>For example, we have a function named as multiplyBy10 which prints all
the input numbers multiplied by 10.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">multiplyBy10&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">numbers&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">numbers&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">result&lt;/span>
&lt;span style="color:#000">new_numbers&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">multiplyBy10&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span> &lt;span style="color:#000">new_numbers&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#Output: [10, 20, 30, 40 ,50]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, if we want to use Generators here then we will make the following changes.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">multiplyBy10&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">numbers&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">numbers&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">yield&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">new_numbers&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">multiplyBy10&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span> &lt;span style="color:#000">new_numbers&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#Output: Generators object&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In Generators, we use yield() function in place of return(). So when
we try to print new_numbers list now, it just prints Generators
object. The reason for this is because Generators do not hold any value
in memory, it yields one result at a time. So essentially it is just
waiting for us to ask for the next result. To print the next result we
can just say print next(new_numbers) , so how it is working is its
reading the first value and squaring it and yielding out value 1. Also
in this case, we can just print next(new_numbers) 5 times to print all
numbers and if we do it for the 6th time then we will get an error
StopIteration which means Generators has exhausted its limit and it
has no 6th element to print.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">print&lt;/span> &lt;span style="color:#204a87">next&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">new_numbers&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#Output: 1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="generators-using-for-loop">Generators using for loop&lt;/h3>
&lt;p>If we now want to print the complete list of squared values then we
can just do:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">multiplyBy10&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">numbers&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">numbers&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">yield&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">new_numbers&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">multiplyBy10&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">num&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">new_numbers&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span> &lt;span style="color:#000">num&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The output will be:&lt;/p>
&lt;pre>&lt;code>10
20
30
40
50
&lt;/code>&lt;/pre>
&lt;h3 id="generators-with-list-comprehension">Generators with List Comprehension&lt;/h3>
&lt;p>Python has something called List Comprehension, if we use this then we
can replace the complete function def with just:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">new_numbers&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">]]&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span> &lt;span style="color:#000">new_numbers&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#Output: [10, 20, 30, 40 ,50]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here the point to note is square brackets [] in line 1 is very
important. If we change it to () then again we will start getting
Generators object.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">new_numbers&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span> &lt;span style="color:#000">new_numbers&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#Output: Generators object&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can get the individual elements again from Generators if we do a
for loop over &lt;code>new_numbers&lt;/code>, as we did previously. Alternatively, we
can convert it into a list and then print it.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">new_numbers&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span> &lt;span style="color:#204a87">list&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">new_numbers&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">#Output: [10, 20, 30, 40 ,50]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But here if we convert this into a list then we lose on performance,
which we will just see next.&lt;/p>
&lt;h3 id="why-use-generators">Why use Generators?&lt;/h3>
&lt;p>Generators are better with Performance because it does not hold the
values in memory and here with the small examples we provide it is not a
big deal since we are dealing with a small amount of data but just
consider a scenario where the records are in millions of data set. And
if we try to convert millions of data elements into a list then that
will make an impact on memory and performance because
everything will in memory.&lt;/p>
&lt;p>Let us see an example of how Generators help in Performance. First,
without Generators, normal function taking 1 million records and
returns the result[people] for 1 million.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">names&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;John&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Jack&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Adam&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Steve&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Rick&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000">majors&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Math&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;CompScience&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;Arts&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;Business&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;Economics&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># prints the memory before we run the function&lt;/span>
&lt;span style="color:#000">memory&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">mem_profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">memory_usage_resource&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Memory (Before): {memory}Mb&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">people_list&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">people&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#204a87">range&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">people&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#000">person&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;id&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;name&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">random&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">choice&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">names&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;major&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">randon&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">choice&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">majors&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">person&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">result&lt;/span>
&lt;span style="color:#000">t1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">clock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">people&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">people_list&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10000000&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">t2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">clock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># prints the memory after we run the function&lt;/span>
&lt;span style="color:#000">memory&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">mem_profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">memory_usage_resource&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Memory (After): {memory}Mb&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Took {time} seconds&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">t2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">t1&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#Output&lt;/span>
&lt;span style="color:#000">Memory&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Before&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000">Mb&lt;/span>
&lt;span style="color:#000">Memory&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">After&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">318&lt;/span>&lt;span style="color:#000">Mb&lt;/span>
&lt;span style="color:#000">Took&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1.2&lt;/span> &lt;span style="color:#000">seconds&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I am just giving approximate values to compare it with the next execution
but we just try to run it we will see a serious consumption of memory
with a good amount of time taken.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">names&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;John&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Jack&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Adam&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Steve&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Rick&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000">majors&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Math&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;CompScience&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;Arts&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;Business&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;Economics&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># prints the memory before we run the function&lt;/span>
&lt;span style="color:#000">memory&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">mem_profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">memory_usage_resource&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Memory (Before): {memory}Mb&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">people_generator&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">people&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#204a87">xrange&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">people&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#000">person&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;id&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;name&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">random&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">choice&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">names&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;major&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">randon&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">choice&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">majors&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">yield&lt;/span> &lt;span style="color:#000">person&lt;/span>
&lt;span style="color:#000">t1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">clock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">people&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">people_list&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10000000&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">t2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">clock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># prints the memory after we run the function&lt;/span>
&lt;span style="color:#000">memory&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">mem_profile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">memory_usage_resource&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Memory (After): {memory}Mb&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">print&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Took {time} seconds&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">t2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">t1&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#Output&lt;/span>
&lt;span style="color:#000">Memory&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Before&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000">Mb&lt;/span>
&lt;span style="color:#000">Memory&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">After&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">15&lt;/span>&lt;span style="color:#000">Mb&lt;/span>
&lt;span style="color:#000">Took&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.01&lt;/span> &lt;span style="color:#000">seconds&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now after running the same code using Generators, we will see a
significant amount of performance boost with almost 0 Seconds. And
the reason behind this is that in the case of Generators, we do not keep
anything in memory so the system just reads 1 at a time and yields that.&lt;/p></description></item><item><title>Docs: Cloudmesh</title><link>/docs/book/python/cloudmesh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/book/python/cloudmesh/</guid><description>
&lt;p>Gregor von Laszewski (&lt;a href="mailto:laszewski@gmail.com">laszewski@gmail.com&lt;/a>)&lt;/p></description></item><item><title>Docs: Data</title><link>/docs/book/python/data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/book/python/data/</guid><description>
&lt;p>Gregor von Laszewski (&lt;a href="mailto:laszewski@gmail.com">laszewski@gmail.com&lt;/a>)&lt;/p></description></item><item><title>Docs: Mongo</title><link>/docs/book/python/mongo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/book/python/mongo/</guid><description>
&lt;p>Gregor von Laszewski (&lt;a href="mailto:laszewski@gmail.com">laszewski@gmail.com&lt;/a>)&lt;/p></description></item><item><title>Docs: Other</title><link>/docs/book/python/other/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/book/python/other/</guid><description>
&lt;p>Gregor von Laszewski (&lt;a href="mailto:laszewski@gmail.com">laszewski@gmail.com&lt;/a>)&lt;/p></description></item><item><title>Docs: Applications</title><link>/docs/book/python/applications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/book/python/applications/</guid><description>
&lt;p>Gregor von Laszewski (&lt;a href="mailto:laszewski@gmail.com">laszewski@gmail.com&lt;/a>)&lt;/p></description></item><item><title>Docs: Libraries</title><link>/docs/book/python/libraries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/book/python/libraries/</guid><description>
&lt;p>Gregor von Laszewski (&lt;a href="mailto:laszewski@gmail.com">laszewski@gmail.com&lt;/a>)&lt;/p></description></item></channel></rss>