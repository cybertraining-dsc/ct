<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cybertraining â€“ git</title><link>/tags/git/</link><description>Recent content in git on Cybertraining</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 15 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Github</title><link>/docs/modules/bigdataapplications/2019/tech/github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/modules/bigdataapplications/2019/tech/github/</guid><description>
&lt;h2 id="track-progress-with-github">Track Progress with Github&lt;/h2>
&lt;p>We will be adding git issues for all the assignments provided in the class.
This way you can also keep a track on the items need to be completed.
It is like a todo list. You can check things once you complete it. This way
you can easily track what you need to do and you can comment on the issue
to report the questions you have. This is an experimental idea we are trying
in the class. Hope this helps to manage your work load efficiently.&lt;/p>
&lt;h2 id="how-to-check-this">How to check this?&lt;/h2>
&lt;p>All you have to do is go to your git repository.&lt;/p>
&lt;p>Here are the steps to use this tool effectively.&lt;/p>
&lt;h3 id="step-1">Step 1&lt;/h3>
&lt;p>Go to the repo. Here we use a sample repo.&lt;/p>
&lt;p>&lt;a href="https://github.com/cloudmesh-community/fa19-516-000">Sample Repo&lt;/a>&lt;/p>
&lt;p>Link to your repo will be &lt;a href="https://github.com/cloudmesh-community/fa19-%7Bclass-id%7D-%7Bhid%7D">https://github.com/cloudmesh-community/fa19-{class-id}-{hid}&lt;/a>&lt;/p>
&lt;p>class-id is your class number for instance 534.
hid is your homework id assigned.&lt;/p>
&lt;h3 id="step-2">Step 2&lt;/h3>
&lt;p>In @fig:github-repo the red colored box shows where you need to navigate
next. Click on issues.&lt;/p>
&lt;p>&lt;img src="../images/assignments/git/gitissue1.png" alt="Git Repo View">{#fig:github-repo}&lt;/p>
&lt;h3 id="step-3">Step 3&lt;/h3>
&lt;p>In @fig:github-issue-list, Git issue list looks like this. The inputs in this are dummy values we
used to test the module. In your repo, things will be readable and
identified based on week. This way you know what you need to do this
week.&lt;/p>
&lt;p>&lt;img src="../images/assignments/git/gitissue-list.png" alt="Git Issue List">{#fig:github-issue-list}&lt;/p>
&lt;h3 id="step-4">Step 4&lt;/h3>
&lt;p>In @fig:github-issue-view this is how a git issue looks like.&lt;/p>
&lt;p>&lt;img src="../images/assignments/git/gitissue-view.png" alt="Git Issue View">{#fig:github-issue-view}&lt;/p>
&lt;p>In here you will see the things that you need to do with main task and subtasks.
This looks like a tood list. No pressure you can customize the way you want it.
We&amp;rsquo;ll put in the basic skeleton for this one.&lt;/p>
&lt;h3 id="step-5-optional">Step 5 (Optional)&lt;/h3>
&lt;p>In @fig:github-issue-assign, assign a TA, once you have completed the issues, you can assign a TA to resolve if you have
issues. In all issues you can make a comment and you can use @ sign to add the specific TA.
For E534 Fall 2019 you can add @vibhatha as an assignee for your issue and we will communicate
to solve the issues. This is an optional thing, you can use canvas or meeting hours to mention
your concerns.&lt;/p>
&lt;p>&lt;img src="../images/assignments/git/assign-issue.png" alt="Git Issue View">{#fig:github-issue-assign}&lt;/p>
&lt;h3 id="step-6-optional">Step 6 (Optional)&lt;/h3>
&lt;p>In @fig:github-issue-label, you can add a label to your issue by clicking labels option in the right hand size within a
given issue.&lt;/p>
&lt;p>&lt;img src="../images/assignments/git/assignment-label.png" alt="Git Issue Label">{#fig:github-issue-label}&lt;/p></description></item><item><title>Docs: Git pull requst</title><link>/docs/tutorial/git/git-pull-request/</link><pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate><guid>/docs/tutorial/git/git-pull-request/</guid><description>
&lt;img src="/docs/tutorial/git/git-pull-request/featured-image_hu1e98c14e7ef5c047e5e9948283a69421_148226_640x0_resize_catmullrom_2.png" width="640" height="412"/>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>It is very easy to help us modifying the Web Site through GitHub pull requests. We demonstrate this via the commandline and via the GitHub GUI.&lt;/p>
&lt;p>The commandline can be run form any computer with Linux, Windows, and macOS. ON Windows you need to install gitbash and use that. THis way you have a commandline terminal that just works like on LInux and OSX.&lt;/p>
&lt;/div>
&lt;h2 id="github-pull-request-via-the-commandline">Github Pull Request via the commandline&lt;/h2>
&lt;p>9:15 min&lt;/p>
&lt;div width=100px>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/F369RBlL33A" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;/div>
&lt;h2 id="github-pull-request-via-the-github-gui">Github Pull Request via the GitHub GUI&lt;/h2>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/eU3jOuM7OQc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>Docs: Installing Git Bash on Windows 10</title><link>/docs/tutorial/reu/github/git/</link><pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate><guid>/docs/tutorial/reu/github/git/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;h2 id="abstract">Abstract&lt;/h2>
&lt;p>This tutorial teaches how to install Git and Git Bash.&lt;/p>
&lt;p>Contents&lt;/p>
&lt;div class="toc">
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#windows">Windows&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;/div>
&lt;p>&lt;strong>Keywords:&lt;/strong> git&lt;/p>
&lt;h2 id="windows">Windows&lt;/h2>
&lt;p>Click the following image to be redirected to a YouTube video tutorial for installing Git and Git Bash. This same video also includes instructions to create a virtual Python environment, which you can do as well.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/HCotEx_xCfA" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>To verify whether you have Git, you can press &lt;code>Win + R&lt;/code> on your desktop, type &lt;code>cmd&lt;/code>, and press &lt;code>Enter&lt;/code>. Then type &lt;code>git clone&lt;/code> and press &lt;code>Enter&lt;/code>. If you do not have Git installed, it will say &lt;code>'git' is not recognized as an internal or external command...&lt;/code>&lt;/p>
&lt;p>As long as Git does not change up their website and hyperlinks, you should be able to download Git from here and skip to step 2: &lt;a href="https://git-scm.com/downloads">https://git-scm.com/downloads&lt;/a>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Open a web browser and search &lt;code>git&lt;/code>. Look for the result that is from &lt;code>git-scm.com&lt;/code> and click Downloads.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click &lt;code>Download for Windows&lt;/code>. The download will commence. Please open the file once it is finished downloading.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The UAC Prompt will appear. Click &lt;code>Yes&lt;/code> because Git is a safe program. It will show you Git&amp;rsquo;s license: a GNU General Public License. Click &lt;code>Next&lt;/code>.&lt;/p>
&lt;ol>
&lt;li>The GNU General Public License means that the program is open-source (free of charge).&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Click &lt;code>Next&lt;/code> to confirm that &lt;code>C:\Program Files\Git&lt;/code> is the directory where you want Git to be installed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click &lt;code>Next&lt;/code> unless you would like an icon for Git on the desktop (in which case you can check the box and then click &lt;code>Next&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You will be asked several questions for the setup. We recommend the following settings:&lt;/p>
&lt;ul>
&lt;li>Click &lt;code>Next&lt;/code> to accept the text editor,&lt;/li>
&lt;li>Click &lt;code>Next&lt;/code> again to Let Git decide the default branch name&lt;/li>
&lt;li>Click &lt;code>Next&lt;/code> again to run Git from the command line and 3rd party software,&lt;/li>
&lt;li>Click &lt;code>Next&lt;/code> again to use the OpenSSL library&lt;/li>
&lt;li>Click &lt;code>Next&lt;/code> again to checkout Windows-style,&lt;/li>
&lt;li>Click &lt;code>Next&lt;/code> again to use MinTTY,&lt;/li>
&lt;li>Click &lt;code>Next&lt;/code> again to use the default git pull,&lt;/li>
&lt;li>Click &lt;code>Next&lt;/code> again to use the Git Credential Manager Core,&lt;/li>
&lt;li>Click &lt;code>Next&lt;/code> again to enable file system caching, and then&lt;/li>
&lt;li>Click &lt;code>Install&lt;/code> because we do not need experimental features.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>The progress bar should not take too long to finish. To test if it is installed, you can search for &lt;code>Git Bash&lt;/code> in the Windows search now to run it.&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Docs: Using Raw Images in GitHub and Hugo in Compatible Fashion</title><link>/docs/tutorial/reu/github/image/</link><pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate><guid>/docs/tutorial/reu/github/image/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>This tutorial teaches how to add images on GitHub and use them in your
markdown file that can be rendered in Hugo and markdownon GitHub.&lt;/p>
&lt;p>Contents&lt;/p>
&lt;div class="toc">
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#steps">Steps&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;/div>
&lt;p>&lt;strong>Keywords:&lt;/strong> github&lt;/p>
&lt;h2 id="steps">Steps&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Upload your image to GitHub in the images directory&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click on the image file and then right click on it and click &lt;code>Open image in new tab&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use the URL shown in the address bar of the new tab to paste into
the markdown file.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When using the file, please add a caption; also, if it is copied, make
the citation which should point to the reference section&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>![database sample](https://github.com/cybertraining-dsc/cybertraining-dsc.github.io/raw/main/content/en/docs/tutorial/reu/github/images/images-download.png)
**Figure 2:** Sample Database file obtained from the USGS
water-quality database for the year 2017 [^1]
## Refernces
[^1]: HERE COMES THE CITATION OF THE IMAGE
&lt;/code>&lt;/pre></description></item><item><title>Docs: Using Raw Images in GitHub and Hugo in Compatible Fashion</title><link>/docs/tutorial/reu/github/images/</link><pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate><guid>/docs/tutorial/reu/github/images/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>This tutorial teaches how to add images on GitHub and use them in your
markdown file that can be rendered in Hugo and markdownon GitHub.&lt;/p>
&lt;p>Contents&lt;/p>
&lt;div class="toc">
&lt;nav id="TableOfContents">&lt;/nav>
&lt;/div>
&lt;/div>
&lt;p>&lt;strong>Keywords:&lt;/strong> github&lt;/p>
&lt;p>How to use images is clearly shown in our template at&lt;/p>
&lt;p>&lt;a href="https://github.com/cybertraining-dsc/hid-example/blob/main/project/index.md">https://github.com/cybertraining-dsc/hid-example/blob/main/project/index.md&lt;/a>&lt;/p></description></item><item><title>Docs: Adding an SSH Key for GitHub Repository</title><link>/docs/tutorial/git/git-ssh/</link><pubDate>Sat, 17 Jul 2021 00:00:00 +0000</pubDate><guid>/docs/tutorial/git/git-ssh/</guid><description>
&lt;p>Jacques Fleischer, Gregor von Laszewski&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;h2 id="abstract">Abstract&lt;/h2>
&lt;p>We present how to configure an SSH Key on GitHub so that you can clone, commit, pull, and push to repositories. SSH keys provide an easy way to authenticate to github. Together with ssh-agent and ssh-add it allows you to do multiple commtits without having to retype the password.&lt;/p>
&lt;p>Contents&lt;/p>
&lt;div class="toc">
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#documentation-for-linux-and-macos">Documentation for Linux and macOS&lt;/a>&lt;/li>
&lt;li>&lt;a href="#uploading-the-ssh-key">Uploading the SSH key&lt;/a>&lt;/li>
&lt;li>&lt;a href="#using-the-ssh-key">Using the ssh key&lt;/a>&lt;/li>
&lt;li>&lt;a href="#using-ssh-agent-and-ssh-add">Using ssh-agent and ssh-add&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;/div>
&lt;p>&lt;strong>Keywords:&lt;/strong> ssh&lt;/p>
&lt;h2 id="documentation-for-linux-and-macos">Documentation for Linux and macOS&lt;/h2>
&lt;p>Please follow the Windows documentation, but instaed of using gitbash, pleas use the regular terminal. on macOS, make sure you have xcode installed.&lt;/p>
&lt;h2 id="uploading-the-ssh-key">Uploading the SSH key&lt;/h2>
&lt;p>Please ensure that you have Git (Git Bash) and a repository on GitHub. This tutorial assumes you already have a GitHub repository as well as a GitHub account.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Open Git Bash by pressing the Windows key, typing &lt;code>git bash&lt;/code>, and pressing Enter.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Then, go on GitHub, click on your profile icon in the top right, click &lt;code>Settings&lt;/code>, and click &lt;code>SSH and GPG keys&lt;/code> on the left hand side. Confirm that there are no SSH keys associated with your account. If there are keys, then perhaps you have made some already. This tutorial focuses on creating a new one.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Go back to Git Bash and type &lt;code>ssh-keygen&lt;/code>. Press &lt;code>Enter&lt;/code>. Press &lt;code>Enter&lt;/code> again when it asks you the file in which to save the key (it should say &lt;code>Enter file in which to save the key (/c/Users/USERNAME/.ssh/id_rsa):&lt;/code>.&lt;/p>
&lt;ol>
&lt;li>If you have already created a key here, it will ask you if you would like to overwrite the file. Type &lt;code>y&lt;/code> and press &lt;code>Enter&lt;/code>.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Enter a password that you will remember for your SSH key. It will not appear as you type it, so make sure you get it right the first time. Press &lt;code>Enter&lt;/code> after typing the password that you come up with.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>After seeing the randomart image associated with your SSH, you should be able to type a new command. Type &lt;code>cat ~/.ssh/id_rsa.pub&lt;/code> and press &lt;code>Enter&lt;/code>. Your key will appearâ€” remember that this should not be shared with others. The key begins with &lt;code>ssh-rsa&lt;/code> and it may end with your username. Copy this entire key by clicking and dragging over it, right-clicking, and clicking &lt;code>Copy&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Return to your web browser which is on the GitHub SSH key settings page. Click the green button that reads &lt;code>New SSH Key&lt;/code> and type a Title for this key. You should name it something memorable and distinct; for example, if you just generated the key on your desktop computer, a suitable name is &lt;code>Desktop&lt;/code>. If generated on your laptop, name it &lt;code>Laptop&lt;/code>, or if you have numerous laptops, differentiate them with distinct names, and so on.&lt;/p>
&lt;ol>
&lt;li>If you only have one computer and you have preexisting keys on this page, maybe some which you do not remember the password to or have fallen out of use, consider deleting them (as long as you are sure this will not break anything).&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Paste the key into the key box. You should have copied it from Git Bash in Step #5. Then, click the green button that reads &lt;code>Add SSH key&lt;/code>. Congratulationsâ€” you have successfully configured your SSH key.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="using-the-ssh-key">Using the ssh key&lt;/h2>
&lt;p>Now we will try cloning a repository. We use as an example a repository that we created for a student from a REU. Your example may be different. please adjust the repository name. Your repository will have a format of &lt;code>xxxx-reu-xxx&lt;/code>&lt;/p>
&lt;ol start="8">
&lt;li>
&lt;p>Navigate to your repository and &lt;code>cd&lt;/code> into it. (In case of the REU we recommend to place it into a directory called &lt;code>cybertraining-dsc&lt;/code>.&lt;/p>
&lt;pre>&lt;code>$ mkdir ~/Descktop/cybertraining-dsc
$ cd cybertraining-dsc
$ git clone git@github.com:cybertraining-dsc/YOURREPONAME.git
&lt;/code>&lt;/pre>&lt;p>and replace YOURREPONAME with the name of your repository&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Alternatively you can download it via the GitHub Web GUI. Once you are on your repository page, click the green button that reads &lt;code>Code&lt;/code> with a download symbol. Click the &lt;code>SSH&lt;/code> option and click on the clipboard next to the link so that you copy it. It should say &lt;code>Copied!&lt;/code> after you click on it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Decide where you want your repository folder to be stored. This tutorial will clone the repo into the Documents folder. Go back to Git Bash and type
&lt;code>cd ~/Desktop/cybertraining-dsc&lt;/code> and press &lt;code>Enter&lt;/code>. It is a good idea to create a folder titled &lt;code>reu&lt;/code> for organization. Type &lt;code>mkdir reu&lt;/code> and press &lt;code>Enter&lt;/code>. Type &lt;code>cd reu&lt;/code> and press &lt;code>Enter&lt;/code>. Finally, type &lt;code>git clone&lt;/code>, and after you put a space after clone, paste the copied link from GitHub. For example, your command should look similar to this: &lt;code>git clone git@github.com:cybertraining-dsc/su21-reu-361.git&lt;/code> Then, press &lt;code>Enter&lt;/code>.&lt;/p>
&lt;ol>
&lt;li>The shortcut &lt;code>Ctrl + V&lt;/code> does not work in Git Bash for pasting. Instead, you can press &lt;code>Shift + Insert&lt;/code> to paste.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Type in your password for your SSH key and press &lt;code>Enter&lt;/code>. The repo should clone with no issue. You can now type &lt;code>code .&lt;/code> and press &lt;code>Enter&lt;/code> to open VSCode in this directory. Click &lt;code>Yes, I trust the authors&lt;/code> if prompted in VSCode. If you use PyCharm instead of VSCode, you can open it from Windows search; inside of PyCharm, click &lt;code>File&lt;/code>, &lt;code>Open...&lt;/code> and then navigate to &lt;code>C:&lt;/code>, &lt;code>Users&lt;/code>, your username, &lt;code>Documents&lt;/code>, and then click on &lt;code>reu&lt;/code> so it is highlighted in blue and then click &lt;code>OK&lt;/code>. If PyCharm asks, you can choose to open it in &lt;code>This Window&lt;/code> or a &lt;code>New Window&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="using-ssh-agent-and-ssh-add">Using ssh-agent and ssh-add&lt;/h2>
&lt;p>If you do not want to always type in your password you can prior to the first commit in the termnal in which you issue the commits say&lt;/p>
&lt;pre>&lt;code>$ eval `ssh-agent`
$ ssh-add
&lt;/code>&lt;/pre></description></item><item><title>Docs: Adding SSH Keys for a GitHub Repository</title><link>/docs/tutorial/reu/github/ssh/</link><pubDate>Sat, 17 Jul 2021 00:00:00 +0000</pubDate><guid>/docs/tutorial/reu/github/ssh/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>This tutorial teaches how to configure an SSH Key on GitHub so that you can clone, commit, pull, and push to repositories (repos).&lt;/p>
&lt;p>Contents&lt;/p>
&lt;div class="toc">
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#windows">Windows&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;/div>
&lt;p>&lt;strong>Keywords:&lt;/strong> ssh&lt;/p>
&lt;h2 id="windows">Windows&lt;/h2>
&lt;p>Please ensure that you have Git (Git Bash) and a repository on GitHub. This tutorial was created with the REU program in mind, where the students are provided with a GitHub repository. If you are not in REU, then you can create a new repository on GitHub and clone that instead.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Open Git Bash by pressing the Windows key, typing &lt;code>git bash&lt;/code>, and pressing Enter.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Then, go on GitHub, click on your profile icon in the top right, click &lt;code>Settings&lt;/code>, and click &lt;code>SSH and GPG keys&lt;/code> on the left hand side. Confirm that there are no SSH keys associated with your account. If there are keys, then perhaps you have made some already. This tutorial focuses on creating a new one.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Go back to Git Bash and type &lt;code>ssh-keygen&lt;/code>. Press &lt;code>Enter&lt;/code>. Press &lt;code>Enter&lt;/code> again when it asks you the file in which to save the key (it should say &lt;code>Enter file in which to save the key (/c/Users/USERNAME/.ssh/id_rsa):&lt;/code>.&lt;/p>
&lt;ol>
&lt;li>If you have already created a key here, it will ask you if you would like to overwrite the file. Type &lt;code>y&lt;/code> and press &lt;code>Enter&lt;/code>.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Enter a password that you will remember for your SSH key. It will not appear as you type it, so make sure you get it right the first time. Press &lt;code>Enter&lt;/code> after typing the password that you come up with.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>After seeing the randomart image associated with your SSH, you should be able to type a new command. Type &lt;code>cat ~/.ssh/id_rsa.pub&lt;/code> and press &lt;code>Enter&lt;/code>. Your key will appearâ€” remember that this should not be shared with others. The key begins with &lt;code>ssh-rsa&lt;/code> and it may end with your username. Copy this entire key by clicking and dragging over it, right-clicking, and clicking &lt;code>Copy&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Return to your web browser which is on the GitHub SSH key settings page. Click the green button that reads &lt;code>New SSH Key&lt;/code> and type a Title for this key. You should name it something memorable and distinct; for example, if you just generated the key on your desktop computer, a suitable name is &lt;code>Desktop&lt;/code>. If generated on your laptop, name it &lt;code>Laptop&lt;/code>, or if you have numerous laptops, differentiate them with distinct names, and so on.&lt;/p>
&lt;ol>
&lt;li>If you only have one computer and you have preexisting keys on this page, maybe some which you do not remember the password to or have fallen out of use, consider deleting them (as long as you are sure this will not break anything).&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Paste the key into the key box. You should have copied it from Git Bash in Step #5. Then, click the green button that reads &lt;code>Add SSH key&lt;/code>. Congratulationsâ€” you have successfully configured your SSH key. Now we will try cloning your REU repository.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Navigate to your repository. It should be in the cybertraining-dsc directory with a name format of &lt;code>xxxx-reu-xxx&lt;/code>. Once you are on that page, click the green button that reads &lt;code>Code&lt;/code> with a download symbol. Click the &lt;code>SSH&lt;/code> option and click on the clipboard next to the link so that you copy it. It should say &lt;code>Copied!&lt;/code> after you click on it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Decide where you want your repository folder to be stored. This tutorial will clone the repo into the Documents folder. Go back to Git Bash and type &lt;code>cd ~/Documents&lt;/code> and press &lt;code>Enter&lt;/code>. It is a good idea to create a folder titled &lt;code>reu&lt;/code> for organization. Type &lt;code>mkdir reu&lt;/code> and press &lt;code>Enter&lt;/code>. Type &lt;code>cd reu&lt;/code> and press &lt;code>Enter&lt;/code>. Finally, type &lt;code>git clone&lt;/code>, and after you put a space after clone, paste the copied link from GitHub. For example, your command should look similar to this: &lt;code>git clone git@github.com:cybertraining-dsc/su21-reu-361.git&lt;/code> Then, press &lt;code>Enter&lt;/code>.&lt;/p>
&lt;ol>
&lt;li>The shortcut &lt;code>Ctrl + V&lt;/code> does not work in Git Bash for pasting. Instead, you can press &lt;code>Shift + Insert&lt;/code> to paste.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Type in your password for your SSH key and press &lt;code>Enter&lt;/code>. The repo should clone with no issue. You can now type &lt;code>code .&lt;/code> and press &lt;code>Enter&lt;/code> to open VSCode in this directory. Click &lt;code>Yes, I trust the authors&lt;/code> if prompted in VSCode. If you use PyCharm instead of VSCode, you can open it from Windows search; inside of PyCharm, click &lt;code>File&lt;/code>, &lt;code>Open...&lt;/code> and then navigate to &lt;code>C:&lt;/code>, &lt;code>Users&lt;/code>, your username, &lt;code>Documents&lt;/code>, and then click on &lt;code>reu&lt;/code> so it is highlighted in blue and then click &lt;code>OK&lt;/code>. If PyCharm asks, you can choose to open it in &lt;code>This Window&lt;/code> or a &lt;code>New Window&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Docs: GitHub gh Command Line Interface</title><link>/docs/tutorial/git/git-gh/</link><pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate><guid>/docs/tutorial/git/git-gh/</guid><description>
&lt;img src="/docs/tutorial/git/git-gh/featured-image_hu01992e3b0b9fde28c6f5f617d4c1ca8c_222072_640x0_resize_catmullrom_2.png" width="640" height="231"/>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="/docs/tutorial/git/git-gh/featured-image_hu01992e3b0b9fde28c6f5f617d4c1ca8c_222072_600x300_fill_catmullrom_smart1_2.png" width="600" height="300">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>Figure 1: GitHub Command gh.&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>GitHub provides an extended gh commandline tool that allow easy interaction of
forking repositories directly from github. IT also provides additional fimctionality
to interact with other advanced features that are typically not provided in the git command tool.&lt;/p>
&lt;p>&lt;strong>Learning Objectives&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Learn how to install the gh command&lt;/li>
&lt;li>Learn how to use the gh command&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Topics covered&lt;/strong>&lt;/p>
&lt;div class="toc">
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#1-introduction">1. Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="#2-installing-github-gh-command">2. Installing GitHub gh command&lt;/a>&lt;/li>
&lt;li>&lt;a href="#3-logging-in-with-github-gh-command">3. Logging in with GitHub gh Command&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#31-adding-additional-keys">3.1 Adding Additional Keys&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#4-forking">4. Forking&lt;/a>&lt;/li>
&lt;li>&lt;a href="#5-pull-requests">5. Pull Requests&lt;/a>&lt;/li>
&lt;li>&lt;a href="#6-managing-issues-with-github-gh-command">6. Managing Issues with GitHub gh Command&lt;/a>&lt;/li>
&lt;li>&lt;a href="#7-manual-pages">7. Manual Pages&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#71-gh">7.1 gh&lt;/a>&lt;/li>
&lt;li>&lt;a href="#72-list-of-man-pages">7.2 List of Man Pages&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#7-conclusion">7. Conclusion&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;/div>
&lt;h2 id="1-introduction">1. Introduction&lt;/h2>
&lt;p>The new GitHub &lt;code>gh&lt;/code> command allows GitHub users to work from the terminal of
their machine without having to visit the web browser GUI to manage things like
issues, PRs, and forking. We will show you what features it provides and how to
use it. The &lt;code>gh&lt;/code> command provides useful features that is not provided by the `git
commandline tool.&lt;/p>
&lt;h2 id="2-installing-github-gh-command">2. Installing GitHub gh command&lt;/h2>
&lt;p>Visit the GitHub CLI homepage at &lt;a href="https://cli.github.com/">https://cli.github.com/&lt;/a> for installation
instructions. We recommend that you check out the source distribution because
We found that whne we did this tutorial not all features were included in the
brew instalation. We assume ths will cahnge over time and you may soon be able
to just use the bre install on LInux and MacOs.&lt;/p>
&lt;p>On mac, you can use the following command with
&lt;a href="https://brew.sh/">Brew&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">brew install gh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For Windows useser, please follow the install instructions fro Winodws.&lt;/p>
&lt;h2 id="3-logging-in-with-github-gh-command">3. Logging in with GitHub gh Command&lt;/h2>
&lt;p>It is best practice to be using SSH-keys with GitHub. Create one if you have
not already with the following command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">ssh-keygen
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We recommend t use the the default location.&lt;/p>
&lt;p>To authenticate with the GitHub &lt;code>gh&lt;/code> comamand, run the following command. We have included
the answers to the interactive prompts used for this guide.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gh auth login
What account &lt;span style="color:#204a87;font-weight:bold">do&lt;/span> you want to log into? GitHub.com
? What account &lt;span style="color:#204a87;font-weight:bold">do&lt;/span> you want to log into? GitHub.com
? What is your preferred protocol &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> Git operations? SSH
? Upload your SSH public key to your GitHub account? ~/.ssh/id_rsa.pub
? How would you like to authenticate GitHub CLI? Login with a web browser
! First copy your one-time code: 1234-1A11
- Press Enter to open github.com in your browser...
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="31-adding-additional-keys">3.1 Adding Additional Keys&lt;/h3>
&lt;p>IN acse you work with multiple computers it is advisable to add your keys from these
machines also. We demonstarte the interaction to upload the key from a new machine.&lt;/p>
&lt;pre>&lt;code>newmachine$ gh ssh-key add ~/.ssh/id_rsa.pub
Error: insufficient OAuth scopes to list SSH keys
Run the following to grant scopes: gh auth refresh -s write:public_key
newmachine$ gh auth refresh -s write:public_key
! First copy your one-time code: 4C2D-E896
- Press Enter to open github.com in your browser...
âœ“ Authentication complete. Press Enter to continue...
newmachine$ gh ssh-key add ~/.ssh/id_rsa.pub
âœ“ Public key added to your account
&lt;/code>&lt;/pre>&lt;h2 id="4-forking">4. Forking&lt;/h2>
&lt;p>We can easily create a fork of a repo with the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gh repo fork
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is useful for when you do not have write access to the original repository.&lt;/p>
&lt;h2 id="5-pull-requests">5. Pull Requests&lt;/h2>
&lt;p>We can create a pull request easily as follows from a git repo:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gh pr create
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The command above will ask the user where to push the branch (if it does not
already exist on the remote). It will also offer the option to fork the initial
repository. You will want to do this if you do not have write access to the
original repo.&lt;/p>
&lt;p>Once created, you may view the status of the PR with the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gh pr status
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Reviewers can checkout your pull request to verify changes as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gh pr checkout &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>PR NUMBER&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The reviewer can then approve the PR as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gh pr review --approve
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Subsequently, the PR can be merged as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gh pr merge &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>PR NUMBER&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You may also list all pull requests with the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gh pr list
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, PRs can be closed with&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gh pr close &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>PR NUMBER&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="6-managing-issues-with-github-gh-command">6. Managing Issues with GitHub gh Command&lt;/h2>
&lt;p>To create an issue, call the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gh issue create --title&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Bug 1&amp;#34;&lt;/span> --body&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;description&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can also check the status of issues relevant to use with:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gh issue status
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alternatively, we may list all open issues.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gh issue list
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, we may close issues with:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gh issue close &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>ISSUE NUMBER&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="7-manual-pages">7. Manual Pages&lt;/h2>
&lt;h3 id="71-gh">7.1 gh&lt;/h3>
&lt;pre>&lt;code>gh(1) gh(1)
NAME
gh - GitHub CLI
SYNOPSIS
gh [flags]
DESCRIPTION
Work seamlessly with GitHub from the command line.
OPTIONS
--help[=false] Show help for command
--version[=false] Show gh version
EXAMPLE
$ gh issue create
$ gh repo clone cli/cli
$ gh pr checkout 321
SEE ALSO
gh-alias(1), gh-api(1), gh-auth(1), gh-completion(1), gh-config(1),
gh-gist(1), gh-issue(1), gh-pr(1), gh-release(1), gh-repo(1),
gh-secret(1), gh-ssh-key(1)
&lt;/code>&lt;/pre>&lt;h3 id="72-list-of-man-pages">7.2 List of Man Pages&lt;/h3>
&lt;p>Tha manual pages are published at the &lt;a href="https://cli.github.com/manual/">gh manual&lt;/a>.
For mor information you can also use the man command. A full list of manual pages includes:&lt;/p>
&lt;ul>
&lt;li>gh&lt;/li>
&lt;li>gh-alias-delete&lt;/li>
&lt;li>gh-alias-list&lt;/li>
&lt;li>gh-alias-set&lt;/li>
&lt;li>gh-alias&lt;/li>
&lt;li>gh-api&lt;/li>
&lt;li>gh-auth-login&lt;/li>
&lt;li>gh-auth-logout&lt;/li>
&lt;li>gh-auth-refresh&lt;/li>
&lt;li>gh-auth-status&lt;/li>
&lt;li>gh-auth&lt;/li>
&lt;li>gh-completion&lt;/li>
&lt;li>gh-config-get&lt;/li>
&lt;li>gh-config-set&lt;/li>
&lt;li>gh-config&lt;/li>
&lt;li>gh-gist-clone&lt;/li>
&lt;li>gh-gist-create&lt;/li>
&lt;li>gh-gist-delete&lt;/li>
&lt;li>gh-gist-edit&lt;/li>
&lt;li>gh-gist-list&lt;/li>
&lt;li>gh-gist-view&lt;/li>
&lt;li>gh-gist&lt;/li>
&lt;li>gh-issue-close&lt;/li>
&lt;li>gh-issue-comment&lt;/li>
&lt;li>gh-issue-create&lt;/li>
&lt;li>gh-issue-delete&lt;/li>
&lt;li>gh-issue-edit&lt;/li>
&lt;li>gh-issue-list&lt;/li>
&lt;li>gh-issue-reopen&lt;/li>
&lt;li>gh-issue-status&lt;/li>
&lt;li>gh-issue-view&lt;/li>
&lt;li>gh-issue&lt;/li>
&lt;li>gh-pr-checkout&lt;/li>
&lt;li>gh-pr-checks&lt;/li>
&lt;li>gh-pr-close&lt;/li>
&lt;li>gh-pr-comment&lt;/li>
&lt;li>gh-pr-create&lt;/li>
&lt;li>gh-pr-diff&lt;/li>
&lt;li>gh-pr-edit&lt;/li>
&lt;li>gh-pr-list&lt;/li>
&lt;li>gh-pr-merge&lt;/li>
&lt;li>gh-pr-ready&lt;/li>
&lt;li>gh-pr-reopen&lt;/li>
&lt;li>gh-pr-review&lt;/li>
&lt;li>gh-pr-status&lt;/li>
&lt;li>gh-pr-view&lt;/li>
&lt;li>gh-pr&lt;/li>
&lt;li>gh-release-create&lt;/li>
&lt;li>gh-release-delete&lt;/li>
&lt;li>gh-release-download&lt;/li>
&lt;li>gh-release-list&lt;/li>
&lt;li>gh-release-upload&lt;/li>
&lt;li>gh-release-view&lt;/li>
&lt;li>gh-release&lt;/li>
&lt;li>gh-repo-clone&lt;/li>
&lt;li>gh-repo-create&lt;/li>
&lt;li>gh-repo-fork&lt;/li>
&lt;li>gh-repo-view&lt;/li>
&lt;li>gh-repo&lt;/li>
&lt;li>gh-secret-list&lt;/li>
&lt;li>gh-secret-remove&lt;/li>
&lt;li>gh-secret-set&lt;/li>
&lt;li>gh-secret&lt;/li>
&lt;li>gh-ssh-key-add&lt;/li>
&lt;li>gh-ssh-key-list&lt;/li>
&lt;li>gh-ssh-key&lt;/li>
&lt;/ul>
&lt;h2 id="7-conclusion">7. Conclusion&lt;/h2>
&lt;p>There are many other commands for the GitHub CLI that can be found in the
&lt;a href="https://cli.github.com/manual/">gh manual&lt;/a>, however we only include a select
number of relevant commands for this guide. The commands mentioned above serve
to familiarize the user with the GitHub CLI while also providing practical
usage.&lt;/p></description></item><item><title>Docs: GitHub hid Repository</title><link>/docs/tutorial/git/git-hid-repo/</link><pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate><guid>/docs/tutorial/git/git-hid-repo/</guid><description>
&lt;img src="/docs/tutorial/git/git-hid-repo/featured-image_hu699bad2f39bda78a6f8b2a2be30d8f74_224192_640x0_resize_catmullrom_2.png" width="640" height="505"/>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="/docs/tutorial/git/git-hid-repo/featured-image_hu699bad2f39bda78a6f8b2a2be30d8f74_224192_600x300_fill_catmullrom_smart1_2.png" width="600" height="300">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>Figure 1: GitHub hid directory.&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>To contribute to our open source projects we provide you with a Git
repository in which you conduct your activities.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/cybertraining-dsc">https://github.com/cybertraining-dsc&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Learning Objectives&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Learn how to cone the repo&lt;/li>
&lt;li>Learn how to use the rego&lt;/li>
&lt;li>Learn how to commit and push changes to GitHub&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Topics covered&lt;/strong>&lt;/p>
&lt;div class="toc">
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#1-introduction">1. Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="#2-prerequisites">2. Prerequisites&lt;/a>&lt;/li>
&lt;li>&lt;a href="#3-setting-up-the-ssh-key">3. Setting up the ssh-key&lt;/a>&lt;/li>
&lt;li>&lt;a href="#4-simplify-the-tutorial-while-using-shell-variables">4. Simplify the Tutorial while using Shell Variables&lt;/a>&lt;/li>
&lt;li>&lt;a href="#5-cloning-the-repository">5. Cloning the Repository&lt;/a>&lt;/li>
&lt;li>&lt;a href="#6-commit-changes-locally">6. Commit Changes Locally&lt;/a>&lt;/li>
&lt;li>&lt;a href="#7-adding-files">7. Adding Files&lt;/a>&lt;/li>
&lt;li>&lt;a href="#8-push-the-commits-to-github">8. Push the commits to GitHub&lt;/a>&lt;/li>
&lt;li>&lt;a href="#8-pulling-changes">8. Pulling Changes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#7-conclusion">7. Conclusion&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;/div>
&lt;h2 id="1-introduction">1. Introduction&lt;/h2>
&lt;p>As part of our open source activities, you will be given a GitHub
repository.
To contribute to our open source projects we provide you with a Git
repository in which you conduct your activities.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/cybertraining-dsc">https://github.com/cybertraining-dsc&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>We will explain how you use them from the command line.&lt;/p>
&lt;h2 id="2-prerequisites">2. Prerequisites&lt;/h2>
&lt;ul>
&lt;li>On macOS we assume you have x-code installed which comes with the git command&lt;/li>
&lt;li>line tools On Windows we assume you have gitbash installed and use git&lt;/li>
&lt;li>through gitbash. Alternatively, you can use multipass, or WSL2 On Linux, make&lt;/li>
&lt;li>sure you have the git command line tools installed.&lt;/li>
&lt;/ul>
&lt;h2 id="3-setting-up-the-ssh-key">3. Setting up the ssh-key&lt;/h2>
&lt;p>In case you have not yet set up an ssh key, you can do this with the command.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ssh-keygen
&lt;/code>&lt;/pre>&lt;/div>&lt;p>YOu will be asked for the default location, accept it. After that, you will be
asked for a passphrase. Please choose one and make sure you do not make it
empty. Often you find wrong tutorials or guidance by others that say you can
leave it empty. DO NOT FOLLOW THEIR WRONG ADVICE.&lt;/p>
&lt;p>Upload the content of the file&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cat ~/.ssh/id_rsa.pub
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Into the GitHub portal at &lt;a href="https://github.com/settings/keys">https://github.com/settings/keys&lt;/a>.
You will then use the SSH key to authenticate to GitHub.
To not always have to type in the password you can use &lt;code>ssh-keychain&lt;/code>.
On Mac OS you can simply use the command&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ssh-add
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and enter your password&lt;/p>
&lt;h2 id="4-simplify-the-tutorial-while-using-shell-variables">4. Simplify the Tutorial while using Shell Variables&lt;/h2>
&lt;p>To simplify the tutorial we use from here on two shell variables. The first is
&lt;code>HID&lt;/code> which specifies the name of your GitHub repository as found in&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/cybertraining-dsc">https://github.com/cybertraining-dsc&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>In our case, we use &lt;code>hid-example&lt;/code>. The second variable is the name/path of the
editor in which we edit commit messages for git.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ &lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">HID&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>hid-example
$ &lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">EDITOR&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>emacs
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="5-cloning-the-repository">5. Cloning the Repository&lt;/h2>
&lt;p>Let us now clone the repository, change int the checked out repository
and edit the project file.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git clone git@github.com:cybertraining-dsc/&lt;span style="color:#000">$HID&lt;/span>.git
$ &lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#000">$HID&lt;/span>/project
$ &lt;span style="color:#000">$EDITOR&lt;/span> index.md
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now let us make a modification and save the file locally.&lt;/p>
&lt;h2 id="6-commit-changes-locally">6. Commit Changes Locally&lt;/h2>
&lt;p>To commit the changes locally, you use the following command. Make sure to
put a commit message and specify the filename.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git commit -m &lt;span style="color:#4e9a06">&amp;#34;Improved document with this and that&amp;#34;&lt;/span> index.md
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="7-adding-files">7. Adding Files&lt;/h2>
&lt;p>To add new files you can simply use the add command and use the commit command
after it.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git add image/newimage.png
$ git commit -m &lt;span style="color:#4e9a06">&amp;#34;Improved document with this and that&amp;#34;&lt;/span> image/newimage.png
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="8-push-the-commits-to-github">8. Push the commits to GitHub&lt;/h2>
&lt;p>GitHub as you know is a service that stores your files once you push them from
your local commits to GitHub. To push the commits use the command&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git push
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="8-pulling-changes">8. Pulling Changes&lt;/h2>
&lt;p>GitHub shines when you work with multiple people together on your projects. This
may be project partners or feedbacks that are placed in your documents by us.
Thus, it is important that you state in synchronization with the files in
GitHub. Do this use the command&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git pull
&lt;/code>&lt;/pre>&lt;/div>&lt;p>in any directory of the repository that you have checked out. It will update
any file that has changed. In case of a conflict, your file will include a
text such as&lt;/p>
&lt;pre>&lt;code>&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
This is the new text from you
=======
This is the text in the repo
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/code>&lt;/pre>&lt;p>You will have to remove the text between the &amp;laquo;&amp;lt; and &amp;raquo;&amp;gt; and replace it with
the text that is correct. In the simplest case, one of the choices will be
correct. However, you may have in some cases to merge the two versions.&lt;/p>
&lt;p>It is important to pull frequently. It is also important to not just paste and
copy the entire file, but use the command line tools and editor to conduct the
change as not to overwrite other changes.&lt;/p>
&lt;h2 id="7-conclusion">7. Conclusion&lt;/h2>
&lt;p>The use of git from the command line is straightforward for existing
repositories. It is easy to do. Make sure to create an &lt;code>ssh-key&lt;/code> and start in
synchronization with frequent pulls.&lt;/p></description></item></channel></rss>